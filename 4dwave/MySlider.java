import java.awt.*;import java.lang.*;import java.util.*;import java.awt.event.*;public class MySlider extends java.awt.Canvas implements MouseListener, MouseMotionListener{	//***** SLIDER CONSTANTS	final		static		int			THUMB_WIDTH = 5;	final		static		int			NOT_FOUND = -1;	final		static		int			THUMB = 0;	final		static		int			PAGE_UP = 1;	final		static		int			PAGE_DOWN = 2;	private	int				block_increment, page_increment, unit_increment;	private	int				width, height, thumb_width;	private	int				maximum, minimum, cur_value;	private	int				orientation;	private	Rectangle		thumb_rect;	private	Rectangle		border_rect;	private	Rectangle		page_up_rect;	private	Rectangle		page_down_rect;	private	Point			last_click;// used for dragging events	private	boolean			dragging;	private	double			scale_factor;		//*************************************************	//*		I N I T	//*************************************************	public MySlider()	{		this.block_increment = 10;		this.page_increment = 10;		this.unit_increment = 1;		this.width = 0;		this.height = 10;		this.thumb_width = THUMB_WIDTH;		this.minimum = 0;		this.maximum = 100;		this.cur_value = 0;		this.orientation = Scrollbar.HORIZONTAL;		this.last_click = new Point(0, 0);		this.dragging = false;			this.scale_factor = 0.0;				enableEvents(AWTEvent.MOUSE_EVENT_MASK);		enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);				addMouseListener(this);		addMouseMotionListener(this);				this.setVisible(true);				return;			}// end of init()	//*************************************************	//*		I N I T	//*************************************************	public MySlider(int width)	{			this();		this.width = width;							return;			}// end of init()		//*************************************************	//*		I N I T	//*************************************************	public MySlider(int width, int min, int max, int cur_value, double scale)	{						setWidth(width);		setMinimum(min);		setMaximum(max);		setCurrentValue(cur_value);		setScaleFactor(scale);						return;			}// end of init()			public int getWidth()	{		return(this.width);			}// end of getWidth()		public void setWidth(int value)	{		if (value >= 0)			this.width = value;					return;	}			public int getHeight()	{		return(this.height);			}// end of getHeight()		public void setHeight(int value)	{		return;			}// end of setHeight()			public void setSize(int width, int height)	{		super.setSize(width, height);				this.width = width;		this.height = height;						return;			}// end of setSize()	public void setBounds(int x, int y, int width, int height)	{		super.setBounds(x, y, width, height);				this.width = width;		this.height = height;						return;			}// end of setSize()			public int getBlockIncrement()	{		return(this.block_increment);			}// end of getBlockIncrement()	public void setBlockIncrement(int value)	{		if (value >= 0)		{			this.block_increment = value;			this.page_increment = value;		}				return;			}// end of setBlockIncrement()	public int getCurrentValue()	{		return(this.cur_value);	}		public void setCurrentValue(int value)	{		this.cur_value = value;		return;	}		public int getMaximum()	{		return(this.maximum);			}// end of getMaximum()	public void setMaximum(int value)	{		this.maximum = value;							return;			}// end of setMaximum()	public int getMinimum()	{		return(this.minimum);			}// end of getMinimum()	public void setMinimum(int value)	{		this.minimum = value;							return;			}// end of setMinimum()	public int getOrientation()	{		return(this.orientation);			}// end of getOrientation()	public void setOrientation(int value)	{		if (value == Scrollbar.HORIZONTAL)			this.orientation = value;	}// end of setOrientation()	public int getPageIncrement()	{		return(this.page_increment);			}// end of getPageIncrement()	public void setPageIncrement(int value)	{		if (value >= 0)		{			this.block_increment = value;			this.page_increment = value;		}				return;			}// end of setPageIncrement()	public int getUnitIncrement()	{		return(this.unit_increment);			}// end of getUnitIncrement()	public void setUnitIncrement(int value)	{		if (value >= 0)			this.unit_increment = value;					return;			}// end of setUnitIncrement()	public int getValue()	{		return(this.cur_value);			}// end of getValue()	public void setValue(int value)	{		if (value >= 0)			this.cur_value = value;				repaint();				return;			}// end of setValue()	public void setScaleFactor(double factor)	{		this.scale_factor = factor;		return;	}		public double getScalefactor()	{		return(this.scale_factor);	}	public void update(Graphics g)	{		super.update(g);		drawTheSlider(g);				return;	}// end of update	public void paint(Graphics g)	{			super.paint(g);		drawTheSlider(g);				return;			}// end of paint()	//*****************************************************************	//*		D R A W  T H E  S L I D E R	//*****************************************************************	public void drawTheSlider(Graphics graph)	{		Graphics 	g = graph;		Point		start_pt = new Point(0,0);		Point		end_pt = new Point (0,0);				try		{			//***** Get a graphics context			if (g == null)				g = this.getGraphics();			else				g = graph;				if (g == null)				return;						//***** Set the value			this.cur_value = (int)(scale_factor * 100);						//***** Set the pen to black			g.setColor(Color.black);					//***** Define all the drawing rects			setUpRects();						//***** Erase old drawing			g.clearRect(border_rect.x, border_rect.y, border_rect.width, border_rect.height);							//***** Draw a line down the middle			start_pt.x = 0;			start_pt.y = this.height/2;			end_pt.x = this.width;			end_pt.y = this.height/2;			g.drawLine(start_pt.x, start_pt.y,					   end_pt.x, end_pt.y);					//***** Draw the thumb			g.clearRect(thumb_rect.x, thumb_rect.y, thumb_rect.width, thumb_rect.height);			g.drawRect(thumb_rect.x, thumb_rect.y, thumb_rect.width, thumb_rect.height);			g.setColor(Color.lightGray);			g.fillRect(thumb_rect.x + 1, thumb_rect.y, thumb_rect.width - 1, thumb_rect.height);			g.setColor(Color.black);						//***** Outline the slider			g.drawRect(border_rect.x, border_rect.y, border_rect.width -1, border_rect.height);					//***** Get rid of the graphics context if we made it internally			if (graph == null)				g.dispose();				}		catch (Exception e) {}					return;		}// end of drawTheSlider		//*****************************************************************	//*		S E T  U P  R E C T S	//*****************************************************************	public void setUpRects()	{		int			x = 0, pixels_of_width = 0, units_in_scale = 0;		double		pixels_per_unit = 0.0;		pixels_of_width = this.width - THUMB_WIDTH;		units_in_scale = (this.maximum - this.minimum) + 1;		pixels_per_unit = (double)((double)pixels_of_width/(double)units_in_scale);				//***** Define the thumb_rect		x = (int)(this.cur_value * pixels_per_unit);				thumb_rect = new Rectangle(x, 0, this.thumb_width, this.height);				//***** Define the page_up_rect		page_up_rect = new Rectangle(thumb_rect.x + thumb_rect.width + 1,									 0, 									 this.width - (thumb_rect.x + thumb_rect.width + 1),									 this.height);				//***** Define the page_down_rect		page_down_rect = new Rectangle(0,									 0, 									 (thumb_rect.x - 1),									 this.height);				//****** Define the border_rect		border_rect = new Rectangle(0, 0, this.width, this.height);			return;			}// end of setUpRects()	public void mouseClicked(MouseEvent e)	{		//MySlider_MouseClicked(e);		return;	}	public void mouseEntered(MouseEvent e){}	public void mouseExited(MouseEvent e){}	public void mousePressed(MouseEvent e)	{		MySlider_MousePressed(e);		return;	}	public void mouseReleased(MouseEvent e)	{		MySlider_MouseReleased(e);		return;	}		public void mouseMoved(MouseEvent e){}	public void mouseDragged(MouseEvent e)	{		 MySlider_MouseDragged(e);		 return;	}		//*****************************************************************	//*		M O U S E  P R E S S E D 	//*****************************************************************	public void MySlider_MousePressed(MouseEvent e)	{			int		where = NOT_FOUND;			where = findClickArea(e.getX(), e.getY());				switch (where)		{			case THUMB:				 this.last_click.x = e.getX();				 this.last_click.y = e.getY();				 this.dragging = true;				 break;			case PAGE_UP:				 this.cur_value += this.page_increment;				 if (cur_value > this.maximum)				 	this.cur_value = maximum;				 repaint();				 //***** Do something				 break;			case PAGE_DOWN:				 this.cur_value -= this.page_increment;				 if (cur_value < this.minimum)				 	this.cur_value = minimum;				 repaint();				 				 //***** Do something				 break;		}// switch				return;	}// end of mousePressed()	//*****************************************************************	//*		M O U S E  C L I C K E D 	//*****************************************************************	public void MySlider_MouseClicked(MouseEvent e)	{			int		where = NOT_FOUND;			where = findClickArea(e.getX(), e.getY());				switch (where)		{			case THUMB:				 this.last_click.x = e.getX();				 this.last_click.y = e.getY();				 this.dragging = true;				 break;			case PAGE_UP:				 this.cur_value += this.page_increment;				 if (cur_value > this.maximum)				 	this.cur_value = maximum;				 repaint();				 //***** Do something				 break;			case PAGE_DOWN:				 this.cur_value -= this.page_increment;				 if (cur_value < this.minimum)				 	this.cur_value = minimum;				 repaint();				 				 //***** Do something				 break;		}// switch				return;	}// end of mouseClicked()	//*****************************************************************	//*		M O U S E  D R A G G E D 	//*****************************************************************	public void MySlider_MouseDragged(MouseEvent e)	{			int			delta = 0, x = 0;		int			pixels_of_width = 0, units_in_scale = 0;		double		pixels_per_unit = 0.0;						if (this.dragging)		{			x = e.getX();			if (x < 0)				x = 0;			if (x > this.width - THUMB_WIDTH)				 x = this.width - THUMB_WIDTH;						pixels_of_width = this.width - THUMB_WIDTH;			units_in_scale = (this.maximum - this.minimum) + 1;			pixels_per_unit = (double)((double)pixels_of_width/(double)units_in_scale);			this.cur_value = (int)(x/pixels_per_unit);			if (cur_value < this.minimum)					this.cur_value = minimum;			if (cur_value > this.maximum)				 this.cur_value = maximum;			this.last_click.x = x;				 			repaint();		}// if we're dragging				repaint();				return;	}// end of mouseDragged()		//*****************************************************************	//*		M O U S E  R E L E A S E D 	//*****************************************************************	public void MySlider_MouseReleased(MouseEvent e)	{			int			where = NOT_FOUND;		int			x = 0;		int			pixels_of_width = 0, units_in_scale = 0;		double		pixels_per_unit = 0.0;				if (this.dragging)		{			x = e.getX();			if (x < 0)				x = 0;			if (x > this.width - THUMB_WIDTH)				x = this.width - THUMB_WIDTH;						pixels_of_width = this.width - THUMB_WIDTH;			units_in_scale = (this.maximum - this.minimum) + 1;			pixels_per_unit = (double)((double)pixels_of_width/(double)units_in_scale);			this.cur_value = (int)(x/pixels_per_unit);						if (this.cur_value < this.minimum)				this.cur_value = this.minimum;			if (this.cur_value > this.maximum)				this.cur_value = this.maximum;				 				repaint();				 			//***** Set the scale factor based on the current value			scale_factor = (double)(this.cur_value/100.0);			if (scale_factor < 0.01)				scale_factor = 0.01;			if (scale_factor > 1.0)				scale_factor = 1.0;								this.dragging = false;				 		}// if we're dragging								return;	}// end of mouseReleased()					//*****************************************************************	//*		F I N D  C L I C K  A R E A	//*****************************************************************	public int findClickArea(int x, int y)	{			if (this.page_up_rect.contains(x, y))			return(PAGE_UP);		else if (this.page_down_rect.contains(x, y))			return(PAGE_DOWN);		else			return(THUMB);	}// end of findClickArea()		}// end of class MySlider