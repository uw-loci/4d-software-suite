import java.awt.*;public class ChannelsDlog extends Dialog{	Label 				channel_label = null;	Checkbox 			blue_checkbox = null;	Checkbox 			green_checkbox = null;	Checkbox 			red_checkbox = null;	Button 				cancel_button = null;	Button 				ok_button = null;	GridBagLayout		gbl = null;	GridBagConstraints	constraints = null;	Insets				insets = null;			BioradRGBSettings	rgb_settings = null;	BooleanWrapper		cancelled = null;			//**************************************************************************	//*		I N I T	//*		Last modified 12/30/02 for v1.37	//**************************************************************************	public ChannelsDlog(Frame parent, BioradRGBSettings rgb_set, BooleanWrapper was_cancelled, boolean modal)	{		super(parent, modal);		this.rgb_settings = rgb_set;		this.cancelled = was_cancelled;						gbl = new GridBagLayout();		constraints = new GridBagConstraints();		insets = new Insets(0,0,0,0);		setLayout(gbl);		setVisible(false);		setSize(286,210);		setFont(new Font("Dialog", Font.PLAIN, 12));		setForeground(new Color(0));		setBackground(new Color(16777215));		setResizable(false);			channel_label = new java.awt.Label("Channels to Enable?");		//channel_label.setLocation(30,19);		//channel_label.setSize(212,22);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 2;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.weightx = 1;		constraints.weighty = 1;		constraints.fill = GridBagConstraints.HORIZONTAL;		insets.left = 20;		insets.right = 20;		insets.top = 20;		insets.bottom = 0;		constraints.insets = insets;		add(channel_label);		gbl.setConstraints(channel_label, constraints);			red_checkbox = new java.awt.Checkbox("Red Channel");		//red_checkbox.setLocation(55,47);		//red_checkbox.setSize(142,20);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 2;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.weightx = 1;		constraints.weighty = 1;		constraints.fill = GridBagConstraints.HORIZONTAL;		insets.left = 40;		insets.right = 20;		insets.top = 0;		insets.bottom = 0;		constraints.insets = insets;		add(red_checkbox);		gbl.setConstraints(red_checkbox, constraints);		green_checkbox = new java.awt.Checkbox("Green Channel");		//green_checkbox.setLocation(55,78);		//green_checkbox.setSize(142,20);		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.weightx = 1;		constraints.weighty = 1;		constraints.fill = GridBagConstraints.HORIZONTAL;		insets.left = 40;		insets.right = 20;		insets.top = 0;		insets.bottom = 0;		constraints.insets = insets;		add(green_checkbox);		gbl.setConstraints(green_checkbox, constraints);		blue_checkbox = new java.awt.Checkbox("Blue Channel");		//blue_checkbox.setLocation(55,108);		//blue_checkbox.setSize(142,20);		constraints.gridx = 0;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.left = 40;		insets.right = 20;		insets.top = 0;		insets.bottom = 0;		constraints.insets = insets;		add(blue_checkbox);		gbl.setConstraints(blue_checkbox, constraints);		cancel_button = new java.awt.Button();		cancel_button.setLabel("Cancel");		//cancel_button.setLocation(22,146);		//cancel_button.setSize(93,30);		constraints.gridx = 0;		constraints.gridy = 4;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.left = 40;		insets.right = 0;		insets.top = 20;		insets.bottom = 20;		constraints.insets = insets;		add(cancel_button);		gbl.setConstraints(cancel_button, constraints);		ok_button = new java.awt.Button();		ok_button.setLabel("OK");		//ok_button.setLocation(143,146);		//ok_button.setSize(93,30);		constraints.gridx = 1;		constraints.gridy = 4;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.left = 0;		insets.right = 40;		insets.top = 20;		insets.bottom = 20;		constraints.insets = insets;		add(ok_button);		gbl.setConstraints(ok_button, constraints);		setTitle("Channels");		MyMouseAdapter mouse_adapter = new MyMouseAdapter();		cancel_button.addMouseListener(mouse_adapter);		ok_button.addMouseListener(mouse_adapter);				setupChannelsDlog();		pack();	}		public void addNotify()	{  	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the getInsets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point ok_button = components[i].getLocation();			ok_button.translate(getInsets().left, getInsets().top);			components[i].setLocation(ok_button);		}		fComponentsAdjusted = true;	}    // Used for addNotify check.	boolean fComponentsAdjusted = false;    /**     * Shows or hides the component depending on the boolean flag b.     * @param b  if true, show the component; otherwise, hide the component.     * @see java.awt.Component#isVisible     */    public void setVisible(boolean b)	{		if(b)		{			Rectangle bounds = getParent().getBounds();			Rectangle abounds = getBounds();				setLocation(bounds.x + (bounds.width - abounds.width)/ 2,				 bounds.y + (bounds.height - abounds.height)/2);		}		super.setVisible(b);	}	class MyMouseAdapter extends java.awt.event.MouseAdapter	{		public void mousePressed(java.awt.event.MouseEvent event)		{			Object object = event.getSource();			if (object == cancel_button)				cancelButton_MousePressed(event);			else if (object == ok_button)				okButton_MousePressed(event);		}	}	//***********************************************************************	//*		C A N C E L  B U T T O N	//*		Last modified 12/30/02 for v1.37	//***********************************************************************	void cancelButton_MousePressed(java.awt.event.MouseEvent event)	{		cancelled.setValue(true);		setVisible(false);		dispose();	}		//***********************************************************************	//*		O K  B U T T O N	//*		Last modified 12/30/02 for v1.37	//***********************************************************************	void okButton_MousePressed(java.awt.event.MouseEvent event)	{		cancelled.setValue(false);		getResults();		setVisible(false);		dispose();	}	void getResults()	{		int		channels_enabled = 0;		rgb_settings.ch_1_on = red_checkbox.getState();		rgb_settings.ch_2_on = green_checkbox.getState();		rgb_settings.ch_3_on = blue_checkbox.getState();		if (rgb_settings.ch_1_on == true)			channels_enabled += 1;		if (rgb_settings.ch_2_on == true)			channels_enabled += 1;		if (rgb_settings.ch_3_on == true)			channels_enabled += 1;					if (channels_enabled > 1)			rgb_settings.combine_channels = true;		else			rgb_settings.combine_channels = false;			}		void setupChannelsDlog()	{				red_checkbox.setState(rgb_settings.ch_1_on);		green_checkbox.setState(rgb_settings.ch_2_on);		blue_checkbox.setState(rgb_settings.ch_3_on);	}}