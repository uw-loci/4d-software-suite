import java.awt.*;import java.awt.event.*;import java.io.*;import java.util.*;public class CompInfoDlog extends ProcInfoDlog implements ItemListener{	Vector				directories = null;	Label 				file_format_label = null;	Label 				file_format_var_label = null;	Label 				syntax_label = null;	Label 				syntax_var_label = null;	Label				output_directory_label = null;	Choice				output_directory_choice = null;	String				cur_directory = null;		Panel				file_info_panel = null;	GridBagLayout		file_info_gb_layout = null;		boolean				first_update = true;			//*****************************************************************************	//*		I N I T	//*		Last modified 5/29/02	//*****************************************************************************	public CompInfoDlog(Frame parent, boolean modal, BooleanWrapper cancel_obj)	{		super(parent, modal, cancel_obj);				this.cur_directory = Settings.output_directory;		setSize(300,325);		setLayout(main_gb_layout);		setResizable(false);		//***** BEGIN FILE INFO PANEL COMPONENTS		file_info_panel = new Panel();		file_info_gb_layout = new GridBagLayout();		file_info_panel.setLayout(file_info_gb_layout);				syntax_label = new Label("Filename Syntax:");		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		file_info_panel.add(syntax_label);		file_info_gb_layout.setConstraints(syntax_label, constraints);		syntax_var_label = new Label();		syntax_var_label.setFont(StringUtils.getSizedFont("Geneva", Font.PLAIN, 30, 10));		syntax_var_label.setAlignment(Label.LEFT);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 40;		insets.right = 20;		constraints.insets = insets;		file_info_panel.add(syntax_var_label);		file_info_gb_layout.setConstraints(syntax_var_label, constraints);		file_format_label = new Label("File Format:");		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		file_info_panel.add(file_format_label);		file_info_gb_layout.setConstraints(file_format_label, constraints);			file_format_var_label = new Label();		file_format_var_label.setFont(new Font("Geneva", Font.PLAIN, 10));		file_format_var_label.setAlignment(Label.LEFT);		constraints.gridx = 1;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 20;		constraints.insets = insets;		file_info_panel.add(file_format_var_label);		file_info_gb_layout.setConstraints(file_format_var_label, constraints);			output_directory_label = new Label("Folder to save files:");		constraints.gridx = 0;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		file_info_panel.add(output_directory_label);		file_info_gb_layout.setConstraints(output_directory_label, constraints);				output_directory_choice = new Choice();		output_directory_choice.setFont(new Font("Geneva", Font.PLAIN, 10));		constraints.gridx = 0;		constraints.gridy = 4;		constraints.gridwidth = 2;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		file_info_panel.add(output_directory_choice);		file_info_gb_layout.setConstraints(output_directory_choice, constraints);		// file info panel constraints		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(file_info_panel);		main_gb_layout.setConstraints(file_info_panel, constraints);		//***** END FILE INFO PANEL COMPONENTS		//***** BEGIN BUTTON PANEL LAYOUT MODIFICATIONS		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		main_gb_layout.setConstraints(button_panel, constraints);		setupDlog();				setTitle("Compression Info");		output_directory_choice.addItemListener(this);		pack();				return;	}		protected void setupDlog()	{				super.setupDlog();							switch (Settings.input_file_format)		{			case ImageReader.TIFF_FILE:				 file_format_var_label.setText("TIFF");				 break;			case ImageReader.BIORAD_600_FILE:				 file_format_var_label.setText("Bio-Rad 600");				 break;			case ImageReader.BIORAD_1024_FILE:				 file_format_var_label.setText("Bio-Rad 1024");				 break;			case ImageReader.JPEG_FILE:				 file_format_var_label.setText("JPEG");				 break;/*			case ImageReader.PICT_FILE:				 file_format_var_label.setText("PICT");				 break;			case ImageReader.PICS_FILE:				 file_format_var_label.setText("PICS");				 break;			case ImageReader.BMP_FILE:				 file_format_var_label.setText("BMP");				 break;			case ImageReader.GIF_FILE:				 file_format_var_label.setText("GIF");				 break;			case ImageReader.MACPAINT_FILE: 				 file_format_var_label.setText("Macpaint");				 break;			case ImageReader.PHOTOSHOP_FILE: 				 file_format_var_label.setText("Photoshop");				 break;			case ImageReader.QUICKDRAW_GX_PICTURE_FILE:				 file_format_var_label.setText("Quickdraw GX Picture");				 break;			case ImageReader.QUICKTIME_IMAGE_FILE:				 file_format_var_label.setText("Quicktime Image");				 break;			case ImageReader.SGI_IMAGE_FILE:				 file_format_var_label.setText("SGI Image");				 break;			case ImageReader.TARGA_IMAGE_FILE:				 file_format_var_label.setText("Targa Image");				 break;*/				default: 				file_format_var_label.setText("Unknown Image Format");		}// end of switch 				switch (Settings.filename_syntax)		{			case NameUtils.TIFF_FILE:				syntax_var_label.setText("TIFF (e.g. 'Cell1.TIF')");				break;			case NameUtils.BIORAD_600_FILE:				syntax_var_label.setText("Bio-Rad MRC 600 (e.g. 'Cell1.PIC')");				break;			case NameUtils.BIORAD_1024_FILE:				syntax_var_label.setText("Bio-Rad 1024 (e.g. 'Cel00101.PIC')");				break;			case NameUtils.JPEG_FILE:				syntax_var_label.setText("Jpeg (e.g. 'Cell1.JPG')");				break;		}// end of switch		updateChoice();						return;			}// end of setupDlog()		//*********************************************************************	//*		I T E M  S T A T E  C H A N G E D	//*********************************************************************	public void itemStateChanged(ItemEvent event)	{		String		path_string = null;		File		cur_file = null;		Object 		object = null;				object = event.getSource();				if (object == output_directory_choice)		{			if (output_directory_choice.getSelectedIndex() == 0)			{				cur_file = new File(this.cur_directory);				if (cur_file != null && cur_file.exists())				{						cur_file = new File(cur_file.getParent());										if (cur_file != null && cur_file.exists())					{						path_string = cur_file.getAbsolutePath();												//***** Make it the cur_directory if we're not at the root						if (!path_string.equals(File.separator) && !path_string.equals(File.pathSeparator))							this.cur_directory = path_string;											updateChoice();					}					}// if we have a valid directory				else					Settings.image_window.displayMessage("Invalid directory selected.");								}// if they chose the ".." item			else if (output_directory_choice.getSelectedIndex() == 1)			{				// do nothing if they choose the current directory			}			else if (output_directory_choice.getSelectedIndex() > 1)			{				path_string = (String)this.directories.elementAt(output_directory_choice.getSelectedIndex() - 1);				cur_file = new File(path_string);						if (cur_file != null && cur_file.exists())				{											//***** Make it the cur_directory if we're not at the root					if (!path_string.equals(File.separator) && !path_string.equals(File.pathSeparator))						this.cur_directory = path_string;								updateChoice();				}// if the directory exists				else					Settings.image_window.displayMessage("Invalid directory selected.");								}// if they're choosing a sub-directory of the current directory					}// if the event was in the choice				return;			}// end of itemStateChanged()				//*********************************************************************	//*		G E T  R E S U L T S	//*********************************************************************	protected void getResults()	{				super.getResults();			//***** Set the output directory		if (output_directory_choice.getSelectedIndex() == 1)		{			Settings.output_directory = this.cur_directory;		}		else if (output_directory_choice.getSelectedIndex() > 1)		{			if (this.cur_directory.endsWith(File.separator))				Settings.output_directory = this.cur_directory + output_directory_choice.getSelectedItem();			else				Settings.output_directory = this.cur_directory + File.separator + output_directory_choice.getSelectedItem();		}				//***** Make sure the directory ends with a file separator		if (!Settings.output_directory.endsWith(File.separator))			Settings.output_directory += File.separator;									return;				}// end of getResults()	//*********************************************************************	//*		U P D A T E  C H O I C E	//*		Last modified 5/29/02	//*********************************************************************	void updateChoice() 	{		Properties	sys_props = null;		String		key = null;		FontMetrics	fm = null;		String		truncated_string = null, test_string = "A sample string of a reasonable length.";		int			i = 0, default_width = 0;		boolean		at_root = false;						if (cur_directory == null)		{			//***** If the cur_directory is null, make it the same directory as the application.			sys_props = System.getProperties();			key = "user.dir"; 			cur_directory = sys_props.getProperty(key);			Settings.output_directory = cur_directory;						if (cur_directory == null)				return;		}				//***** Find our default width		fm = Toolkit.getDefaultToolkit().getFontMetrics(output_directory_choice.getFont());		default_width = fm.stringWidth(test_string);				//***** Set the choice to a longer string to prevent layout error during pack()		if (first_update)		{			output_directory_choice.add(test_string);			this.pack();			this.setSize(getPreferredSize());			first_update = false;		}				output_directory_choice.removeAll();			//***** Add the ".." choice if we're not at the root			if (cur_directory.equals(File.separator) || cur_directory.equals(File.pathSeparator))			at_root = true;				if (!at_root)			output_directory_choice.add("..");				directories = IOUtils.getDirectoryPaths(cur_directory);				if (directories == null)			return;				for (i = 0; i < directories.size(); i++)		{			try			{				truncated_string = StringUtils.fitStringToWidth((String)directories.elementAt(i), 															    output_directory_choice.getFont(), 															    default_width);			}			catch (Exception e){}			output_directory_choice.add(truncated_string);		}				if (!at_root && output_directory_choice.getItemCount() > 1)			output_directory_choice.select(1);		else if (output_directory_choice.getItemCount() > 0)			output_directory_choice.select(0);					return;			}// end of updateChoice()		}// end of CompInfoDlog class