//******************************************************//*		U R L  B I O R A D  R G B  R E A D E R//******************************************************import java.awt.*;import java.awt.image.*;import java.io.*;import java.util.*;import java.net.*;class URLBioradRGBReader extends BioradRGBReader{		public URLBioradRGBReader()	{		super();						return;			}// init		//******************************************************************************	//*		G E T  I M A G E	//*		Returns a single slice of a Biorad 1024 file as a java.awt.Image 	//*		Last modified 7/11/02 for version 1.33	//******************************************************************************	Image	getImage(String input_directory, String filename, int slice) throws CancelledException, Exception	{		Image						img = null;		DataInputStream				red_is = null;		DataInputStream				green_is = null;		DataInputStream				blue_is = null;		String						red_filename = null;		String						green_filename = null;		String						blue_filename = null;		BooleanWrapper				cancelled = new BooleanWrapper(false);			Settings.input_file_type = ImageReader.RGB_IMAGE;				if (!Settings.rgb_settings.got_settings)			getRGBChannelInfo(cancelled);					if (cancelled.getValue())			throw new CancelledException();					//***** Get the filenames for the active channels		if (Settings.rgb_settings.ch_1_on)		{			red_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name, Settings.current_timepoint, 1);			Settings.input_filename = new String(red_filename);		}		if (Settings.rgb_settings.ch_2_on)		{			green_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name, Settings.current_timepoint, 2);			Settings.input_filename = new String(green_filename);		}		if (Settings.rgb_settings.ch_3_on)		{			blue_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name,Settings.current_timepoint, 3);			Settings.input_filename = new String(blue_filename);		}		getFileInfo(Settings.input_directory_url_string, filename); // get the file info					//***** Get the InputStreams for the active channels		if (Settings.rgb_settings.ch_1_on)			red_is = getImageInputStream(Settings.input_directory_url_string, red_filename);		if (Settings.rgb_settings.ch_2_on)			green_is = getImageInputStream(Settings.input_directory_url_string, green_filename);		if (Settings.rgb_settings.ch_3_on)			blue_is = getImageInputStream(Settings.input_directory_url_string, blue_filename);				//***** Read the RGB Image		img = getSlice(red_is, green_is, blue_is, slice);					//**** Close the InputStreams		if (red_is != null)			red_is.close();		if (green_is != null)			green_is.close();		if (blue_is != null)			blue_is.close();							return(img);			}// end of getImage()	//******************************************************************************	//*		G E T  S L I C E	//*		Assumes you have not skipped any bytes.  Skips to the beginning of the	//*		slice data, and reads one slice (image_width * image_height * bytes_per_pixel) 	//*		in size.	//*	//*		NOTE!!  This method does not do file size checking the same way it 	//*		would for a file on the local drive.  Files over the web do not always	//*		have all bytes available, so assuming that is.available() is the total	//*		file size resulted in failure more often than not.	//*	//*		Last modified 7/11/02 for version 1.33	//******************************************************************************	Image	getSlice(DataInputStream red_is, DataInputStream green_is, DataInputStream blue_is, 					 int slice) throws Exception	{		long		skipped_bytes = 0;		Image		img = null;		int			offset_to_slice = 0;// bytes to skip to get to the slice's data		int			img_size = 0;		int[]		pixels = null;							if (slice <= 0)			slice = 1;					img_size = Settings.image_width * Settings.image_height;					if (Settings.rgb_settings.ch_1_on)		{							offset_to_slice = 76 + ((slice - 1) * img_size);						//***** Skip to the start of the image data			skipped_bytes = red_is.skip((long)offset_to_slice);			if (skipped_bytes != offset_to_slice)				throw (new Exception("Cannot skip to image data."));							}// red channel			if (Settings.rgb_settings.ch_2_on)		{							offset_to_slice = 76 + ((slice - 1) * img_size);							//***** Skip to the start of the image data			skipped_bytes = green_is.skip((long)offset_to_slice);			if (skipped_bytes != offset_to_slice)				throw (new Exception("Cannot skip to image data."));							}//green channel		if (Settings.rgb_settings.ch_3_on)		{				offset_to_slice = 76 + ((slice - 1) * img_size);							//***** Skip to the start of the image data			skipped_bytes = blue_is.skip((long)offset_to_slice);			if (skipped_bytes != offset_to_slice)				throw (new Exception("Cannot skip to image data."));							}//green channel								pixels = getImagePixels(red_is, green_is, blue_is);	   		img = Toolkit.getDefaultToolkit().createImage(new MemoryImageSource(Settings.image_width, 																			Settings.image_height, 																			pixels, 																			0, 																			Settings.image_width));		  		if (img != null)		{			Settings.input_file_format = ImageReader.BIORAD_1024_FILE;			Settings.output_file_type = ImageReader.RGB_IMAGE;		}															return(img);			}// end of getSlice()	//*************************************************************************	//*		C H E C K  F O R   C H A N N E L S	//*		Given a Biorad 1024 filename, checks the directory	//*		for filenames corresponding to channels 1, 2 & 3	//*		Last modified 7/11/02 for version 1.33	//*************************************************************************	void	checkForChannels() throws Exception	{		URL					test_url = null;		InputStream			test_is = null;		String				test_filename = null;		int					num_channels = 0;				// Check for the red channel		test_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name, Settings.first_timepoint, 1);		test_url = new URL(Settings.input_directory_url_string +  test_filename);		test_is = test_url.openStream();		Settings.rgb_settings.ch_1_on = (test_is != null); 		// Check for the green channel		test_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name, Settings.first_timepoint, 2);		test_url = new URL(Settings.input_directory_url_string +  test_filename);		test_is = test_url.openStream();		Settings.rgb_settings.ch_2_on = (test_is != null); 		// Check for the blue channel		test_filename = NameUtils.createBioradRGBName(Settings.base_timepoint_name, Settings.first_timepoint, 3);		test_url = new URL(Settings.input_directory_url_string +  test_filename);		test_is = test_url.openStream();		Settings.rgb_settings.ch_3_on = (test_is != null); 					if (Settings.rgb_settings.ch_1_on)			num_channels += 1;		if (Settings.rgb_settings.ch_2_on)			num_channels += 1;		if (Settings.rgb_settings.ch_3_on)			num_channels += 1;						Settings.rgb_settings.num_channels = num_channels;				return;			}// end of checkForChannels()}//end of class URLBioradRGBReader