//******************************************************//*		B I O R A D  R E A D E R//******************************************************import java.awt.*;import java.awt.image.*;import java.net.*;import java.util.*;import java.io.*;class BioradReader extends ImageReader{	public BioradReader()	{		super();				return;			}// init	//******************************************************************	//*			G E T  F I L E  I N F O	//*			Last modified 7/11/02 for version 1.33	//******************************************************************	void	 getFileInfo(String directory, String filename) throws Exception 	{		RandomAccessFile		raf = null;		File					f = null;		int  					image_width = 0, image_height = 0;		int 					num_slices = 0;									f = new File(directory + filename);		if (f == null)			throw new Exception();				if (!f.exists())			throw new Exception("Unable to locate file " + filename);		raf = new RandomAccessFile(f, "r");		if (raf == null)			throw new Exception("RandomAccessFile was not created.");			this.swap_bytes = true;// swap bytes		this.bytes_per_pixel = 1;					image_width = getShort(raf);			if (image_width > 0)			Settings.image_width = image_width;		else			throw new Exception("Image width was read as < 1 pixels.");				image_height = getShort(raf);		if (image_height > 0)			Settings.image_height = image_height;		else			throw new Exception("Image height was read as < 1 pixels.");				num_slices = getShort(raf); 		if (num_slices > 0)			Settings.total_planes = num_slices;		else			throw new Exception("Number of slices was read as < 1.");		raf.close();					setFileIOInfo();							return;			}// end of getFileInfo()		//******************************************************************	//*			G E T  I M A G E	//*			Returns a single slice of a biorad stack as a java.awt.Image	//******************************************************************	Image	getImage(String input_directory, String filename, int slice) throws Exception	{		DataInputStream			is = null;		Image					img = null;				try		{						Settings.input_file_type = ImageReader.GRAY_8_BIT_IMAGE;								is = getImageInputStream(Settings.input_directory, Settings.input_filename); //open the file			if (is != null)			{				getFileInfo(input_directory, filename); // get the file info				img = getSlice(is, slice);				is.close();			}// if the info stream is available									return(img);					}// try		catch (Exception e)		{			throw(e);		}// catch						}// end of getImage()	//******************************************************************************	//*		G E T  S L I C E	//*		Skips to the beginning of the slice data, and reads one slice 	//*		(image_width * image_height * bytes_per_pixel) in size	//******************************************************************************	Image	getSlice(DataInputStream is, int slice) throws Exception	{		long		skipped_bytes = 0;		Image		img = null;		int			offset_to_slice = 0;// bytes to skip to get to the slice's data		byte[]		pixels = null;		ColorModel	cm = null;				try 		{			if (slice <= 0)				slice = 1;							file_size = is.available();						//***** Open the image			offset_to_slice = 76 + ((slice - 1) * image_size_in_bytes);							if (file_size < (offset_to_slice + image_size_in_bytes)) 				throw (new Exception("Slice not available in image file."));			//***** Skip to the start of the image data			skipped_bytes = is.skip((long)offset_to_slice);			if (skipped_bytes != offset_to_slice)				throw (new Exception("Cannot skip to image data."));								file_size = (int)(file_size - skipped_bytes);						setFileIOInfo();						pixels = getImagePixels(is);			//***** Make the LUT			if (Settings.input_file_type == ImageReader.GRAY_8_BIT_IMAGE)				cm = makeGrayscaleColorModel(!this.swap_bytes);			else 	 			cm = makeColorModel();	  			  			//***** Make the image	  		img = Toolkit.getDefaultToolkit().createImage(new MemoryImageSource(Settings.image_width, Settings.image_height, cm, pixels, 0, Settings.image_width));				if (img != null)				Settings.input_file_format = ImageReader.BIORAD_600_FILE;										}// try				catch (Exception e) 		{			throw (e); // rethrow the exception		}// catch				return(img);			}// end of getSlice()	//******************************************************************************	//*		G E T  I M A G E  P I X E L S	//*		Assumes you've already skipped to the start of the image  and that 	//*		image_size_in_bytes, image_width, image_height, file_size, and num_pixels have	//*		already been determined	//*		Last modified 7/3/02	//******************************************************************************	byte[]	getImagePixels(DataInputStream is) throws Exception 	{		byte[] 			pixels = null;		int 			bytes_read = 0;						this.file_size = is.available();													if (this.file_size < this.image_size_in_bytes) 			throw (new Exception("Slice not available in image file."));		pixels = new byte[this.num_pixels];		while (bytes_read < this.num_pixels) 		{			bytes_read += is.read(pixels, bytes_read, 8192);		}				return(pixels);	    	}// end of getImagePixels()	}// end of class BioradReader