import java.awt.event.*;import java.awt.*;public class ThreshEstDlog extends Dialog{	Label				first_timepoint_label = null;	TextField			first_timepoint_field = null;	Label				first_plane_label = null;	TextField			first_plane_field = null;	Label				time_slices_label = null;	TextField			time_slices_field = null;	Label				focalplane_slices_label = null;	TextField			focalplane_slices_field = null;	Label 				syntax_label = null;	Label 				syntax_var_label = null;	Label 				file_format_label = null;	Label 				file_format_var_label = null;	Label				ratio_label = null;	TextField			ratio_text_field = null;	Label				to_one_label = null;	Label				p_label = null;	TextField			p_text_field = null;	Button				ok_button = null, cancel_button = null;	BooleanWrapper		cancel = null;	//***** Layout crap	GridBagLayout		gb_layout = null;	GridBagConstraints	constraints = null;	Insets				insets = null;	int					text_field_columns = 5;				//***************************************************************************	//*		I N I T	//*		Last modified 1/07/03 for v1.37	//***************************************************************************	public ThreshEstDlog(Frame parent, boolean modal, BooleanWrapper cancel_obj)	{						super(parent, modal);		cancel = cancel_obj;		setTitle("Estimate Threshold");		setSize(398,340);		setResizable(false);		setVisible(false);		setFont(new Font("Dialog", Font.PLAIN, 12));		setForeground(new Color(0));		setBackground(new Color(16777215));		gb_layout = new GridBagLayout();		constraints = new GridBagConstraints();		insets = new Insets(0,0,0,0);		setLayout(gb_layout);				first_timepoint_label = new Label("First Timepoint To Process:");		//first_timepoint_label.setLocation(19,15);		//first_timepoint_label.setSize(193,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(first_timepoint_label);		gb_layout.setConstraints(first_timepoint_label, constraints);				first_timepoint_field = new TextField();		first_timepoint_field.setColumns(text_field_columns);		//first_timepoint_field.setLocation(229,15);		//first_timepoint_field.setSize(60,TEXT_FIELD_HEIGHT);		//first_timepoint_field.setFont(text_box_font);		constraints.gridx = 1;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(first_timepoint_field);		gb_layout.setConstraints(first_timepoint_field, constraints);				first_plane_label = new Label("First Plane To Process:");		//first_plane_label.setLocation(19,45);		//first_plane_label.setSize(193,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(first_plane_label);		gb_layout.setConstraints(first_plane_label, constraints);		first_plane_field = new TextField();		first_plane_field.setColumns(text_field_columns);		//first_plane_field.setLocation(229,45);		//first_plane_field.setSize(60,TEXT_FIELD_HEIGHT);		//first_plane_field.setFont(text_box_font);				constraints.gridx = 1;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(first_plane_field);			gb_layout.setConstraints(first_plane_field, constraints);						time_slices_label = new Label("Num Timepoints To Process:");		//time_slices_label.setLocation(19,75);		//time_slices_label.setSize(193,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(time_slices_label);		gb_layout.setConstraints(time_slices_label, constraints);		time_slices_field = new TextField();		time_slices_field.setColumns(text_field_columns);		//time_slices_field.setLocation(229,75);		//time_slices_field.setSize(60,TEXT_FIELD_HEIGHT);		//time_slices_field.setFont(text_box_font);		constraints.gridx = 1;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(time_slices_field);		gb_layout.setConstraints(time_slices_field, constraints);		focalplane_slices_label = new Label("Num Focalplanes To Process:");		//focalplane_slices_label.setLocation(19,105);		//focalplane_slices_label.setSize(193,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(focalplane_slices_label);		gb_layout.setConstraints(focalplane_slices_label, constraints);		focalplane_slices_field = new TextField();		focalplane_slices_field.setColumns(text_field_columns);		//focalplane_slices_field.setLocation(229,104);		//focalplane_slices_field.setSize(60,TEXT_FIELD_HEIGHT);		//focalplane_slices_field.setFont(text_box_font);		constraints.gridx = 1;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(focalplane_slices_field);		gb_layout.setConstraints(focalplane_slices_field, constraints);		syntax_label = new Label("Filename Syntax:");		//syntax_label.setLocation(20,145);		//syntax_label.setSize(110,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 4;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(syntax_label);		gb_layout.setConstraints(syntax_label, constraints);		syntax_var_label = new Label();		syntax_var_label.setFont(new Font("Dialog", Font.PLAIN, 11));		//syntax_var_label.setLocation(135,145);		//syntax_var_label.setSize(240,LABEL_HEIGHT);		constraints.gridx = 1;		constraints.gridy = 4;		constraints.gridwidth = 2;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(syntax_var_label);		gb_layout.setConstraints(syntax_var_label, constraints);		file_format_label = new Label("File Format:");		//file_format_label.setLocation(20,180);		//file_format_label.setSize(110,LABEL_HEIGHT);		constraints.gridx = 0;		constraints.gridy = 5;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(file_format_label);		gb_layout.setConstraints(file_format_label, constraints);			file_format_var_label = new Label();		file_format_var_label.setFont(new Font("Dialog", Font.PLAIN, 11));		//file_format_var_label.setLocation(135,180);		//file_format_var_label.setSize(240,LABEL_HEIGHT);		constraints.gridx = 1;		constraints.gridy = 5;		constraints.gridwidth = 2;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(file_format_var_label);		gb_layout.setConstraints(file_format_var_label, constraints);			ratio_label = new Label("Desired Compression Ratio:");		//ratio_label.setLocation(19,220);		//ratio_label.setSize(180, 20);		constraints.gridx = 0;		constraints.gridy = 6;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(ratio_label);		gb_layout.setConstraints(ratio_label, constraints);		ratio_text_field = new TextField();		ratio_text_field.setColumns(text_field_columns);		//ratio_text_field.setLocation(205,220);		//ratio_text_field.setSize(60, TEXT_FIELD_HEIGHT);		//ratio_text_field.setFont(text_box_font);		constraints.gridx = 1;		constraints.gridy = 6;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(ratio_text_field);		gb_layout.setConstraints(ratio_text_field, constraints);		to_one_label = new Label(":1");		//to_one_label.setLocation(270,220);		//to_one_label.setSize(100, 20);		constraints.gridx = 2;		constraints.gridy = 6;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 20;		constraints.insets = insets;		add(to_one_label);		gb_layout.setConstraints(to_one_label, constraints);		p_label = new Label("P:");		//p_label.setLocation(20,250);		//p_label.setSize(25,15);		constraints.gridx = 0;		constraints.gridy = 7;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(p_label);		gb_layout.setConstraints(p_label, constraints);		p_text_field = new TextField();		p_text_field.setColumns(text_field_columns);		//p_text_field.setLocation(55,250);		//p_text_field.setSize(64,TEXT_FIELD_HEIGHT);		constraints.gridx = 1;		constraints.gridy = 7;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(p_text_field);		gb_layout.setConstraints(p_text_field, constraints);		cancel_button = new Button();		cancel_button.setLabel("Cancel");		//cancel_button.setLocation(108,280);		//cancel_button.setSize(84,32);		constraints.gridx = 0;		constraints.gridy = 8;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.EAST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 40;		insets.left = 40;		insets.right = 20;		constraints.insets = insets;		add(cancel_button);		gb_layout.setConstraints(cancel_button, constraints);				ok_button = new Button();		ok_button.setLabel("OK");		//ok_button.setLocation(221,280);		//ok_button.setSize(84,32);		constraints.gridx = 1;		constraints.gridy = 8;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 40;		insets.left = 20;		insets.right = 40;		constraints.insets = insets;		add(ok_button);		gb_layout.setConstraints(ok_button, constraints);				MyMouseAdapter mouse_adapter = new MyMouseAdapter();		cancel_button.addMouseListener(mouse_adapter);		ok_button.addMouseListener(mouse_adapter);				setupDlog();				pack();				return;	}	public void addNotify()	{  	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the getInsets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(getInsets().left, getInsets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;	}    // Used for addNotify check.	boolean fComponentsAdjusted = false;    /**     * Shows or hides the component depending on the boolean flag b.     * @param b  if true, show the component; otherwise, hide the component.     * @see Component#isVisible     */    public void setVisible(boolean b)	{		if(b)		{			Rectangle bounds = getParent().getBounds();			Rectangle abounds = getBounds();				setLocation(bounds.x + (bounds.width - abounds.width)/ 2,				 bounds.y + (bounds.height - abounds.height)/2);		}		super.setVisible(b);	}	class MyMouseAdapter extends MouseAdapter	{		public void mousePressed(MouseEvent event)		{			Object object = event.getSource();			if (object == cancel_button)				cancelButton_MousePressed(event);			else if (object == ok_button)				okButton_MousePressed(event);		}	}	//****************************************************************************	//*		C A N C E L  B U T T O N	//*		Last modified 1/7/03 for v1.37	//****************************************************************************	void cancelButton_MousePressed(MouseEvent event)	{		cancel.setValue(true);		dispose();	}	//****************************************************************************	//*		O K  B U T T O N	//*		Last modified 1/7/03 for v1.37	//****************************************************************************	void okButton_MousePressed(MouseEvent event)	{		cancel.setValue(false);		getResults();		setVisible(false);		dispose();	}		//****************************************************************************	//*		S E T U P  D L O G	//****************************************************************************	private void setupDlog()	{				first_plane_field.setText("" + Settings.first_plane);		first_timepoint_field.setText("" + Settings.first_timepoint);		time_slices_field.setText("" + CompressionSettings.timepoints_per_block);		focalplane_slices_field.setText("" + CompressionSettings.focalplanes_per_block);		switch (Settings.input_file_format)		{			case ImageReader.TIFF_FILE:				 file_format_var_label.setText("TIFF");				 break;			case ImageReader.BIORAD_600_FILE:				 file_format_var_label.setText("Bio-Rad 600");				 break;			case ImageReader.BIORAD_1024_FILE:				 file_format_var_label.setText("Bio-Rad 1024");				 break;			case ImageReader.JPEG_FILE:				 file_format_var_label.setText("JPEG");				 break;/*			case ImageReader.PICT_FILE:				 file_format_var_label.setText("PICT");				 break;			case ImageReader.PICS_FILE:				 file_format_var_label.setText("PICS");				 break;			case ImageReader.BMP_FILE:				 file_format_var_label.setText("BMP");				 break;			case ImageReader.GIF_FILE:				 file_format_var_label.setText("GIF");				 break;			case ImageReader.MACPAINT_FILE: 				 file_format_var_label.setText("Macpaint");				 break;			case ImageReader.PHOTOSHOP_FILE: 				 file_format_var_label.setText("Photoshop");				 break;			case ImageReader.QUICKDRAW_GX_PICTURE_FILE:				 file_format_var_label.setText("Quickdraw GX Picture");				 break;			case ImageReader.QUICKTIME_IMAGE_FILE:				 file_format_var_label.setText("Quicktime Image");				 break;			case ImageReader.SGI_IMAGE_FILE:				 file_format_var_label.setText("SGI Image");				 break;			case ImageReader.TARGA_IMAGE_FILE:				 file_format_var_label.setText("Targa Image");				 break;*/			default: 				file_format_var_label.setText("Unknown Image Format");		}// end of switch 				switch (Settings.filename_syntax)		{			case NameUtils.TIFF_FILE:				syntax_var_label.setText("Standard (e.g. 'Cell1.TIF')");				break;			case NameUtils.BIORAD_600_FILE:				syntax_var_label.setText("Bio-Rad MRC 600 (e.g. 'Cell1.PIC'");				break;			case NameUtils.BIORAD_1024_FILE:				syntax_var_label.setText("Bio-Rad 1024 (e.g. 'Cel00101.PIC'");				break;			case NameUtils.JPEG_FILE:				syntax_var_label.setText("Bio-Rad 1024 (e.g. 'Cell1.JPG'");				break;		}// end of switch				ratio_text_field.setText("" + Settings.desired_compression_ratio);				p_text_field.setText("" + CompressionSettings.p);				return;	}// end of setupDlog()			protected void getResults()	{		int		tp = 0, fp = 0;						Settings.first_timepoint = getInt(first_timepoint_field, Settings.first_timepoint);		Settings.first_plane = getInt(first_plane_field, Settings.first_plane);				tp = getInt(time_slices_field, CompressionSettings.timepoints_per_block);		fp = getInt(focalplane_slices_field, CompressionSettings.focalplanes_per_block);		CompressionSettings.timepoints_per_block = tp;		CompressionSettings.focalplanes_per_block = fp;				Settings.last_timepoint = Settings.first_timepoint + CompressionSettings.timepoints_per_block - 1;		Settings.last_plane = Settings.first_plane + CompressionSettings.focalplanes_per_block - 1;				Settings.total_timepoints = CompressionSettings.timepoints_per_block;		Settings.total_planes = CompressionSettings.focalplanes_per_block;				Settings.desired_compression_ratio = getDouble(ratio_text_field, Settings.desired_compression_ratio);				CompressionSettings.p = getDouble(p_text_field, CompressionSettings.p);		return;				}// end of getResults()	//*********************************************************************	//*		G E T  I N T	//*********************************************************************	int getInt(TextField field, int default_value) 	{		Double d = null;				try 		{			d = new Double(field.getText());		}		catch (NumberFormatException e) 		{			field.setText("" + default_value);// if the number's invalid, use default			d = null;		}// if an exception was generated				if (d != null)			return((int)d.doubleValue());		else			return(default_value);			}// end of getInt()	//*********************************************************************	//*		G E T  D O U B L E	//*********************************************************************	double getDouble(TextField field, double default_value) 	{		Double d = null;				try 		{			d = new Double(field.getText());		}		catch (NumberFormatException e) 		{			field.setText(""+default_value);// if the number's invalid, use default			d = null;		}// if an exception was generated				if (d != null)			return(d.doubleValue());		else			return(default_value);			}// end of getInt()	}// end of ThreshEstDlog Class