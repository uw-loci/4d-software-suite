import java.awt.*;import java.awt.event.*;public class ProcInfoDlog extends Dialog{	Panel				tp_fp_info_panel = null;	Panel				button_panel = null;	Label 				first_plane_label = null;	Label 				last_plane_label = null;	Label 				first_timepoint_label = null;	Label 				last_timepoint_label = null;	TextField 			first_plane_field = null;	TextField 			last_plane_field = null;	TextField 			first_timepoint_field = null;	TextField 			last_timepoint_field = null;	Button 				cancel_button = null;	Button 				ok_button = null;	BooleanWrapper		cancelled = null;	//***** Layout crap	GridBagLayout		main_gb_layout = null;	GridBagLayout		tp_fp_gb_layout = null, button_gb_layout = null;	GridBagConstraints	constraints = null;	Insets				insets = null;	int					text_field_columns = 5;			//****************************************************************************	//*		I N I T	//*		Last modified 12/30/02 for v1.37	//****************************************************************************		public ProcInfoDlog(Frame parent, boolean modal, BooleanWrapper cancel_obj)	{		super(parent, modal);		this.cancelled = cancel_obj;		setTitle("Processing Info Dialog");					setVisible(false);		setSize(300,175);		setResizable(false);		main_gb_layout = new GridBagLayout();		constraints = new GridBagConstraints();		insets = new Insets(0,0,0,0);		setLayout(main_gb_layout);		//***** BEGIN TP FP INFO PANEL COMPONENTS		tp_fp_info_panel = new Panel();		tp_fp_gb_layout = new GridBagLayout();		tp_fp_info_panel.setLayout(tp_fp_gb_layout);				setFont(new Font("Dialog", Font.PLAIN, 12));				setForeground(new Color(0));		setBackground(new Color(16777215));		first_timepoint_label = new java.awt.Label("First Timepoint To Process:");		//first_timepoint_label.setLocation(19,15);		//first_timepoint_label.setSize(190,20);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		tp_fp_info_panel.add(first_timepoint_label);		tp_fp_gb_layout.setConstraints(first_timepoint_label, constraints);				first_timepoint_field = new java.awt.TextField();		first_timepoint_field.setColumns(text_field_columns);		//first_timepoint_field.setLocation(229,15);		//first_timepoint_field.setSize(60,25);		constraints.gridx = 1;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		tp_fp_info_panel.add(first_timepoint_field);		tp_fp_gb_layout.setConstraints(first_timepoint_field, constraints);				last_timepoint_label = new java.awt.Label("Last Timepoint To Process:");		//last_timepoint_label.setLocation(19,45);		//last_timepoint_label.setSize(190,20);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		tp_fp_info_panel.add(last_timepoint_label);		tp_fp_gb_layout.setConstraints(last_timepoint_label, constraints);		last_timepoint_field = new java.awt.TextField();		last_timepoint_field.setColumns(text_field_columns);		//last_timepoint_field.setLocation(229,45);		//last_timepoint_field.setSize(60,25);		constraints.gridx = 1;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		tp_fp_info_panel.add(last_timepoint_field);			tp_fp_gb_layout.setConstraints(last_timepoint_field, constraints);				first_plane_label = new Label("First Plane To Process:");		//first_plane_label.setLocation(19,75);		//first_plane_label.setSize(190,20);		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		tp_fp_info_panel.add(first_plane_label);		tp_fp_gb_layout.setConstraints(first_plane_label, constraints);		first_plane_field = new java.awt.TextField();		first_plane_field.setColumns(text_field_columns);		//first_plane_field.setLocation(229,75);		//first_plane_field.setSize(60,25);		constraints.gridx = 1;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		tp_fp_info_panel.add(first_plane_field);		tp_fp_gb_layout.setConstraints(first_plane_field, constraints);		last_plane_label = new java.awt.Label("Last Plane To Process:");		//last_plane_label.setLocation(19,105);		//last_plane_label.setSize(190,20);		constraints.gridx = 0;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		tp_fp_info_panel.add(last_plane_label);		tp_fp_gb_layout.setConstraints(last_plane_label, constraints);		last_plane_field = new java.awt.TextField();		last_plane_field.setColumns(text_field_columns);		//last_plane_field.setLocation(229,104);		//last_plane_field.setSize(60,25);		constraints.gridx = 1;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		tp_fp_info_panel.add(last_plane_field);		tp_fp_gb_layout.setConstraints(last_plane_field, constraints);				// tp fp info panel constraints		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(tp_fp_info_panel);		main_gb_layout.setConstraints(tp_fp_info_panel, constraints);		//****** END OF TP FP INFO PANEL COMPONENTS				//***** BEGIN BUTTON PANEL COMPONENTS		button_panel = new Panel();		button_gb_layout = new GridBagLayout();		button_panel.setLayout(button_gb_layout);				cancel_button = new Button();		cancel_button.setLabel("Cancel");		//cancel_button.setLocation(108,220);		//cancel_button.setSize(84,32);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 40;		insets.bottom = 20;		insets.left = 60;		insets.right = 20;		constraints.insets = insets;		button_panel.add(cancel_button);		button_gb_layout.setConstraints(cancel_button, constraints);				ok_button = new Button();		ok_button.setLabel("OK");		//ok_button.setLocation(221,220);		//ok_button.setSize(84,32);		constraints.gridx = 1;		constraints.gridy = 0;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 40;		insets.bottom = 20;		insets.left = 40;		insets.right = 40;		constraints.insets = insets;		button_panel.add(ok_button);		button_gb_layout.setConstraints(ok_button, constraints);		//***** Button Panel Constraints		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.CENTER;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(button_panel);		main_gb_layout.setConstraints(button_panel, constraints);		//***** END OF BUTTON PANEL COMPONENTS				MyWindowAdapter window_adapter = new MyWindowAdapter();		this.addWindowListener(window_adapter);		MyMouseAdapter mouse_adapter = new MyMouseAdapter();		cancel_button.addMouseListener(mouse_adapter);		ok_button.addMouseListener(mouse_adapter);		pack();					}// init	protected void setupDlog()	{		first_plane_field.setText("" + Settings.first_plane);		last_plane_field.setText("" + Settings.total_planes);		last_timepoint_field.setText("" + Settings.last_timepoint);		first_timepoint_field.setText("" + Settings.first_timepoint);				return;	}// end of setupDlog()				public void addNotify()	{  	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the getInsets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(getInsets().left, getInsets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;	}    // Used for addNotify check.	boolean fComponentsAdjusted = false;    /**     * Shows or hides the component depending on the boolean flag b.     * @param b  if true, show the component; otherwise, hide the component.     * @see java.awt.Component#isVisible     */    public void setVisible(boolean b)	{		if(b)		{			Rectangle bounds = getParent().getBounds();			Rectangle abounds = getBounds();				setLocation(bounds.x + (bounds.width - abounds.width)/ 2,				 bounds.y + (bounds.height - abounds.height)/2);		}		super.setVisible(b);	}	class MyWindowAdapter extends java.awt.event.WindowAdapter	{		public void windowClosing(java.awt.event.WindowEvent event)		{			Object object = event.getSource();			if (object == ProcInfoDlog.this)				ProcInfoDlog_WindowClosing(event);		}	}		void ProcInfoDlog_WindowClosing(java.awt.event.WindowEvent event)	{		setVisible(false);	}	class MyMouseAdapter extends MouseAdapter	{		public void mousePressed(MouseEvent event)		{			Object object = event.getSource();			if (object == cancel_button)				cancelButton_MousePressed(event);			else if (object == ok_button)				okButton_MousePressed(event);		}	}		//****************************************************************************	//*		C A N C E L  B U T T O N	//*		Last modified 12/30/02 for 1.37	//****************************************************************************		void cancelButton_MousePressed(MouseEvent event)	{		cancelled.setValue(true);// flag for aborted run		setVisible(false);		dispose();	}	//****************************************************************************	//*		O K  B U T T O N	//*		Last modified 12/30/02 for v1.37	//****************************************************************************		void okButton_MousePressed(java.awt.event.MouseEvent event)	{		cancelled.setValue(false);		getResults();		setVisible(false);		dispose();	}	//****************************************************************************	//*		G E T  R E S U L T S	//****************************************************************************		void getResults()	{						Settings.first_timepoint = getInt(first_timepoint_field, Settings.first_timepoint);		Settings.last_timepoint = getInt(last_timepoint_field, Settings.last_timepoint);		Settings.total_timepoints = (Settings.last_timepoint - Settings.first_timepoint) + 1;		Settings.first_plane = getInt(first_plane_field, Settings.first_plane);		Settings.last_plane = getInt(last_plane_field, Settings.last_plane);		Settings.total_planes = (Settings.last_plane - Settings.first_plane) + 1;						return;				}// end of getResults()		//*********************************************************************	//*		G E T  I N T	//*********************************************************************	int getInt(TextField field, int default_value) 	{		Double d = null;				try 		{			d = new Double(field.getText());		}		catch (NumberFormatException e) 		{			field.setText("" + default_value);// if the number's invalid, use default			d = null;		}// if an exception was generated				if (d != null)			return((int)d.doubleValue());		else			return(default_value);			}// end of getInt()	//*********************************************************************	//*		G E T  D O U B L E	//*********************************************************************	double getDouble(TextField field, double default_value) 	{		Double d;				try 		{			d = new Double(field.getText());		}		catch (NumberFormatException e) 		{			field.setText(""+default_value);// if the number's invalid, use default			d = null;		}// if an exception was generated				if (d != null)			return(d.doubleValue());		else			return(default_value);			}// end of getInt()}// end of ProcInfoDlog class