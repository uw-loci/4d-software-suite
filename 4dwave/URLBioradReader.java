import java.awt.*;import java.awt.image.*;import java.net.*;import java.util.*;import java.io.*;class  URLBioradReader extends BioradReader{	long	current_read_position = 0;	//******************************************************************	//*		I N I T	//******************************************************************	public URLBioradReader()	{		super();				current_read_position = 0;				return;			}// init	//******************************************************************	//*		G E T  F I L E  I N F O	//*		Last modifed 7/8/02	//******************************************************************	void	 getFileInfo(DataInputStream is) throws Exception 	{		int  					image_width = 0, image_height = 0;		int 					num_slices = 0;				try		{							this.swap_bytes = true;// swap bytes			this.bytes_per_pixel = 1;						image_width = getShort(is);				if (image_width > 0)				Settings.image_width = image_width;			else				throw new Exception("Image width was read as < 1 pixels.");					image_height = getShort(is);			if (image_height > 0)				Settings.image_height = image_height;			else				throw new Exception("Image height was read as < 1 pixels.");					num_slices = getShort(is); 			if (num_slices > 0)				Settings.total_planes = num_slices;			else				throw new Exception("Number of slices was read as < 1.");						setFileIOInfo();					}		catch (Exception e)		{			throw (e);		}				return;			}// end of getFileInfo()	//***********************************************************************	//*			G E T  I M A G E	//*			Returns a single slice of a biorad stack as a java.awt.Image	//*			Last modified 7/18/02 for v1.33	//***********************************************************************	Image	getImage(URL url, int slice) throws Exception	{		DataInputStream			is = null;		Image					img = null;				try		{			current_read_position = 0;									Settings.input_file_type = ImageReader.GRAY_8_BIT_IMAGE;								is = getImageInputStream(url); //open the file				if (is == null)				throw new Exception("Unable to open DataInputStream.");						//***** Read the header			getFileInfo(is); // get the file info			is.close();					//***** Read the image			current_read_position = 0;			is = getImageInputStream(url);			if (is == null)				throw new Exception("Unable to open DataInputStream.");							img = getSlice(is, slice);			is.close();		}		catch (Exception e)		{			if (is != null)				is.close();			throw(e);		}								return(img);									}// end of getImage()	//******************************************************************************	//*		G E T  S L I C E	//*		Skips to the beginning of the slice data, and reads one slice 	//*		(image_width * image_height * bytes_per_pixel) in size	//*			//*		NOTE!!  This method does not do file size checking the same way it 	//*		would for a file on the local drive.  Files over the web do not always	//*		have all bytes available, so assuming that is.available() is the total	//*		file size resulted in failure more often than not.	//*	//*		Last modified 7/8/02	//******************************************************************************	Image	getSlice(DataInputStream is, int slice) throws Exception	{		long		skipped_bytes = 0;		Image		img = null;		int			offset_to_slice = 0;// bytes to skip to get to the slice's data		byte[]		pixels = null;		ColorModel	cm = null;					if (slice <= 0)			slice = 1;									//***** Open the image		offset_to_slice = 76 + ((slice - 1) * image_size_in_bytes);						//***** Skip to the start of the image data		skipped_bytes = is.skip((long)offset_to_slice);		if (skipped_bytes != offset_to_slice)			throw (new Exception("Did not skip to image data."));			current_read_position += skipped_bytes;										setFileIOInfo();					pixels = getImagePixels(is);					//***** Make the LUT		if (Settings.input_file_type == ImageReader.GRAY_8_BIT_IMAGE)			cm = makeGrayscaleColorModel(!this.swap_bytes);		else 			cm = makeColorModel();			  		//***** Make the image	  	img = Toolkit.getDefaultToolkit().createImage(new MemoryImageSource(Settings.image_width, 	  																		Settings.image_height, 	  																		cm, // color model	  																		pixels, // pixel data	  																		0, // offset	  																		Settings.image_width));			if (img != null)			Settings.input_file_format = ImageReader.BIORAD_600_FILE;												return(img);			}// end of getSlice()	//******************************************************************************	//*		G E T  I M A G E  P I X E L S	//*		Assumes you've already skipped to the start of the image  and that 	//*		image_size_in_bytes, image_width, image_height, file_size, and num_pixels have	//*		 already been determined	//*	//*		NOTE!!  This method does not do file size checking the same way it 	//*		would for a file on the local drive.  Files over the web do not always	//*		have all bytes available, so assuming that is.available() is the total	//*		file size resulted in failure more often than not.	//*	//*		Last modified 7/3/02	//******************************************************************************	byte[]	getImagePixels(DataInputStream is) throws Exception 	{		byte[] 			pixels = null;		int 			bytes_read = 0;		int				pixels_to_read = 17384;//8192;						pixels = new byte[this.num_pixels];		while (bytes_read < this.num_pixels) 		{			if ((num_pixels - bytes_read) < pixels_to_read)				pixels_to_read = (num_pixels - bytes_read);			bytes_read += is.read(pixels, bytes_read, pixels_to_read);			current_read_position += bytes_read;		}				if (pixels == null)			throw new Exception("Unable to obtain image pixels.");					return(pixels);	    	}// end of getImagePixels()	//******************************************************************	//*			G E T  I N T	//*			Last modified 6/24/02	//******************************************************************	int getInt(DataInputStream is) throws Exception 	{		int 		return_int = 0;				return_int = super.getInt(is);		current_read_position += 4;// advance read position four bytes		return(return_int);				}// end of getInt()	//******************************************************************	//*			G E T  S H O R T	//*			Last modified 6/24/02	//******************************************************************	int getShort(DataInputStream is) throws Exception 	{		int 		return_int = 0;				return_int = super.getShort(is);		current_read_position += 2;// advance read position two bytes		return(return_int);			}// end of getShort()	}// end of class URLBioradReader