//Some code modified from Wayne Rasband's freeware application ImageJimport java.awt.*;import java.awt.image.*;import java.io.*;import java.util.*;class TiffOutput {	//***** TIFF HEADER CONSTANTS	final		static	int			BPS_DATA_SIZE = 6;	final		static	int			HEADER_SIZE = 8;	final		static	int			NUM_ENTRIES = 9;	final		static	int			IFD_SIZE = 2 + (NUM_ENTRIES * 12) + 4; // num_entries + ImageFileDirectory entries + next_IFD	final		static	int			OFFSET_TO_IMAGE_DATA = 768;		final		static	int			NEW_SUBFILE_TYPE = 254;	final		static	int			IMAGE_WIDTH = 256;	final		static	int			IMAGE_LENGTH = 257;	final		static	int			BITS_PER_SAMPLE = 258;	final		static	int			COMPRESSION = 259;	final		static	int			PHOTO_INTERP = 262;	final		static	int			STRIP_OFFSETS = 273;	final		static	int			SAMPLES_PER_PIXEL = 277;	final		static	int			ROWS_PER_STRIP = 278;	final		static	int			STRIP_BYTE_COUNT = 279;	final		static	int			X_RESOLUTION = 282;	final		static	int			Y_RESOLUTION = 283;	final		static	int			PLANAR_CONFIGURATION = 284;	final		static	int			RESOLUTION_UNIT = 296;	final		static	int			COLOR_MAP = 320;	final		static	int			IMAGE_HDR = -22222; //43314			//***** FILE TYPE CONSTANTS	final   static   int			GRAY_8_BIT_IMAGE = 0;	final   static   int			GRAY_16_BIT_IMAGE = 1;	final   static   int			GRAY_32_BIT_IMAGE = 2;	final   static   int			COLOR_8_BIT_IMAGE = 3;	final   static   int			RGB_IMAGE = 4;	static	int						image_width = 0;	static	int						image_height = 0;	static	boolean					invert = false;			//******************************************************************************	//*		S A V E  I M A G E  A S  T I F F 	//******************************************************************************	static void saveImageAsTiff (Image img, String filename, int width, int height) throws Exception	{		DataOutputStream		os = null;		int						next_IFD = 0;		int						bps_size = 0;		byte[]					filler = null;				try 		{			if (img == null)				return;							//***** Get variable info			image_width = width;			image_height = height;									os = getImageOutputStream(filename);						writeTiffHeader(os, next_IFD);			writeImageSlice(os, img);			os.close();					}		catch (Exception e)		{			os.close();			throw(e);							}				return;			}// end of saveImageAsTiff()	//******************************************************************************	//*		S A V E  S T A C K  A S  T I F F 	//*		image_array contains the individual java.awt.image objects	//******************************************************************************	static void saveStackAsTiff (Vector image_array, String filename, int width, int height) throws Exception	{		DataOutputStream		os = null;		int						i = 0, num_slices = 0;		int						image_data_size = 0, image_size_in_bytes = 0;		int						next_IFD = 0;				try 		{			if (image_array == null)				return;			if (image_array.size() <= 1)				throw (new Exception("File is not a TIFF stack."));			//***** Get variable info			image_width = width;			image_height = height;			num_slices = image_array.size();			image_size_in_bytes = getImageSizeInBytes(width, height);			image_data_size = image_size_in_bytes * num_slices;			next_IFD = OFFSET_TO_IMAGE_DATA + image_data_size;						os = getImageOutputStream(filename);						writeTiffHeader(os, next_IFD);			writeImageSlices(os, image_array);						writeStackFooter(os, num_slices, next_IFD);						os.close();					}		catch (Exception e)		{			os.close();			throw(e);							}				return;			}// end of saveImageAsTiff()	//*****************************************************************	//*		G E T  I M A G E  O U T P U T  S T R E A M	//*****************************************************************	static DataOutputStream		getImageOutputStream(String default_filename) throws Exception	{		DataOutputStream		os = null;		FileDialog				fd = null;		String					filename = null;		String					directory = null;		try		{				//***** Get an output stream			fd = new FileDialog(Settings.image_window, "Save image...", FileDialog.SAVE);			if (default_filename != null)				fd.setFile(default_filename);			fd.setVisible(true);			filename = fd.getFile();			directory = fd.getDirectory();						if (filename == null || directory == null)				throw (new IOException());						os = getImageOutputStream(directory, filename);		}		catch (Exception e)		{			throw (new Exception("Unable to create DataOutputStream.  " + e.getMessage()));		}				return(os);		}// end of getImageOutputStream()	//*****************************************************************	//*		G E T  I M A G E  O U T P U T  S T R E A M	//*****************************************************************	static DataOutputStream		getImageOutputStream(String output_directory, String filename) throws Exception	{		DataOutputStream		os = null;		Settings.output_directory = output_directory;		Settings.output_filename = filename;		os = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(Settings.output_directory + Settings.output_filename)));				return(os);		}// end of getImageOutputStream()	//*****************************************************************	//*		W R I T E  T I F F  H E A D E R	//*****************************************************************	static private void writeTiffHeader(DataOutputStream os, int next_IFD) throws Exception	{		int				bps_size = 0;		byte[]			filler = null;						writeTiffIdentifier(os);			writeTiffImageFileDirectory(os, next_IFD, OFFSET_TO_IMAGE_DATA);		if (Settings.output_file_type == RGB_IMAGE)		{			writeBitsPerPixel(os);			bps_size = BPS_DATA_SIZE;		}		filler = new byte[OFFSET_TO_IMAGE_DATA - (HEADER_SIZE + IFD_SIZE + bps_size)]; // create an empty buffer to pad out the header to 768 bytes		os.write(filler);					return;			}// end of writeTiffHeader()		//******************************************************************************	//*		W R I T E  I M A G E  S L I C E	//*		Writes an image as a slice of a tiff stack	//******************************************************************************	static private void writeImageSlice(DataOutputStream os, Image img) throws Exception	{			switch (Settings.output_file_type)			{				case GRAY_8_BIT_IMAGE:					 write8BitImage(os, img);					 break;				case GRAY_16_BIT_IMAGE:					 write16BitImage(os, img, true);					 break;				case RGB_IMAGE:					 writeRGBImage(os, img);					 break;				 default:				 	 throw (new Exception("Can't save TIFF file in this format!"));			}			return;				}// end of writeImageSlice()			//*****************************************************************	//*		W R I T E  I M A G E  S L I C E S	//*****************************************************************	static private void writeImageSlices(DataOutputStream os, Vector image_array) throws Exception	{		int		i = 0;		Image	cur_image = null;				//***** Write all the image data to the file		for (i = 0; i < image_array.size(); i++)		{				int slice = i + 1;				Settings.image_window.displayMessage("Writing TIFF slice " + slice);				cur_image = (Image)image_array.elementAt(i);			writeImageSlice(os, cur_image);				}// for each image		return;			}// end of writeImageArray()				//*****************************************************************	//*		W R I T E  S T A C K  F O O T E R	//*****************************************************************	static private void writeStackFooter(DataOutputStream os, int num_slices, int IFD_offset) throws Exception	{		int		i = 0, image_size = 0;		int		image_offset = OFFSET_TO_IMAGE_DATA;		int		next_IFD = IFD_offset;				//***** Write the footer info to the file, basically the IFDs for slices 2 through n		for (i = 2; i <= num_slices; i++)		{			if (i == num_slices)				next_IFD = 0;			else				next_IFD += IFD_SIZE;						image_size = getImageSizeInBytes(image_width, image_height); 									image_offset += image_size;			writeTiffImageFileDirectory(os, next_IFD, image_offset);							}// for each image after the first				return;	}// end of writeStackFooter()			//*****************************************************************	//*		W R I T E  8  B I T  I M A G E	//*****************************************************************	static void write8BitImage(DataOutputStream os, Image img) throws Exception	{		int 				bytes_written = 0;		int 				count = 0;		int[] 				pixels = null;		int					i = 0, image_size_in_bytes = 0;		byte[]				buffer = null;				try		{			count = 8192;			image_size_in_bytes = image_width *image_height;			buffer = new byte[image_size_in_bytes];			//***** Get the image's pixels			pixels = getImagePixels(img, new Rectangle(0, 0, image_width, image_height), 1);						//***** Read the pixels into byte array			for (i = 0; i < image_size_in_bytes; i++)			{				buffer[i] = (byte)pixels[i];			}						Settings.image_window.displayMessage("Saving TIFF slice to disk.");												//***** Write to the output stream			while (bytes_written < image_size_in_bytes) 			{				if ((bytes_written + count)  > image_size_in_bytes)					count = image_size_in_bytes - bytes_written;								os.write(buffer, bytes_written, count);				bytes_written += count;			}//while there are still bytes to write					}// end of try		catch (Exception e)		{			throw (e);					}				return;	}	//*****************************************************************	//*		W R I T E  1 6  B I T  I M A G E	//*****************************************************************	static void write16BitImage(DataOutputStream os, Image img, boolean unsigned) throws Exception	{		int 				bytes_written = 0;		int 				count = 0, value = 0;		int					i = 0, j = 0, image_size_in_bytes = 0;		byte[]				buffer = null;		int[] 				pixels = null;						try		{			count = image_width * 16;			image_size_in_bytes = getImageSizeInBytes(image_width, image_height);			buffer = new byte[count];			//***** Get the image's pixels			pixels = getImagePixels(img, new Rectangle(0, 0, image_width, image_height), 2);									//***** Write to the output stream			while (bytes_written < image_size_in_bytes) 			{				if ((bytes_written + count)  > image_size_in_bytes)					count = image_size_in_bytes - bytes_written;								j = bytes_written/2;				for (i = 0; i < count; i += 2) 				{					value = pixels[j];					if (unsigned)						value += 32768;					buffer[i] = (byte)(value >>>8);					buffer[i+1] = (byte)value;					j++;				}				os.write(buffer, 0, count);				bytes_written += count;			}//while there are still bytes to write					}// end of try		catch (Exception e)		{			throw (e);					}				return;	}// end of write16BitImage()	//*****************************************************************	//*		W R I T E  R G B  I M A G E	//*****************************************************************	static void writeRGBImage(DataOutputStream os, Image img) throws Exception	{		int 				bytes_written = 0;		int 				count = 0, image_size_in_bytes = 0;		int					i = 0, j = 0;		byte[]				buffer = null;		int[] 				pixels = null;						try		{			count = image_width * 24;			image_size_in_bytes = image_width * image_height * 3;			buffer = new byte[count];			//***** Get the image's pixels			pixels = getImagePixels(img, new Rectangle(0, 0, image_width, image_height), 3);									//***** Write to the output stream			while (bytes_written < image_size_in_bytes) 			{				if ((bytes_written + count)  > image_size_in_bytes)					count = image_size_in_bytes - bytes_written;								j = bytes_written/3;				for (i = 0; i < count; i += 3) 				{					buffer[i]   = (byte)((pixels[j]>>16)  &0xff);	//red					buffer[i+1] = (byte)((pixels[j]>>8) & 0xff);	//green					buffer[i+2] = (byte)(pixels[j] & 0xff);		    //blue					j++;				}				os.write(buffer, 0, count);				bytes_written += count;			}//while there are still bytes to write					}// end of try		catch (Exception e)		{			throw (e);					}				return;	}// end of writeChunkyRGBImage()	//******************************************************************************	//*		W R I T E  T I F F  I D E N T I F I E R	//******************************************************************************	static private void writeTiffIdentifier(DataOutputStream os) throws Exception 	{		try		{			byte[] hdr = new byte[8];			hdr[0] = 77; // "MM" (Motorola byte order)			hdr[1] = 77;			hdr[2] = 0;  // 42 (magic number)			hdr[3] = 42;			hdr[4] = 0;  // 8 (offset to first ImageFileDirectory)			hdr[5] = 0;			hdr[6] = 0;			hdr[7] = 8;			os.write(hdr);		}		catch (Exception e)		{			throw(e);		}					return;			}// end of writeTiffIdentifier()		//******************************************************************************	//*		W R I T E  T I F F  E N T R Y	//******************************************************************************	static private void writeTiffEntry(DataOutputStream os, int tag, int field_type, int count, int value) throws Exception 	{		try		{			os.writeShort(tag);			os.writeShort(field_type);			os.writeInt(count);			if (count== 1 && field_type == 3)				value <<= 16;			os.writeInt(value);		}		catch (Exception e)		{			throw (e);		}					return;			}// end of writeTiffEntry()			//******************************************************************************	//*		W R I T E  T I F F  I M A G E  F I L E  D I R E C T O R Y	//******************************************************************************	static private void writeTiffImageFileDirectory(DataOutputStream os, int next_IFD, int image_offset) throws Exception 	{		int 		bits_per_sample = 8, photo_interp = 0;		int			bytes_per_pixel = 1, samples_per_pixel = 1;		int			image_size_in_bytes = 0;		int			tag_data_offset = 0;							switch (Settings.output_file_type) 		{			case GRAY_8_BIT_IMAGE:				 bits_per_sample = 8;				 photo_interp = invert?0:1;				 break;			case GRAY_16_BIT_IMAGE:				 bits_per_sample = 16;				 photo_interp = invert?0:1;				 bytes_per_pixel = 2;				 break;			case RGB_IMAGE:				 photo_interp = 2;				 bytes_per_pixel = 3;				 samples_per_pixel = 3;				 break;			default:				 throw (new Exception("Can't save this format as TIFF file!"));		}// end of switch			image_size_in_bytes = getImageSizeInBytes(image_width, image_height);		tag_data_offset = HEADER_SIZE + IFD_SIZE;		try		{			os.writeShort(NUM_ENTRIES);						writeTiffEntry(os, NEW_SUBFILE_TYPE, 4, 1, 0);			writeTiffEntry(os, IMAGE_WIDTH,      3, 1, image_width);			writeTiffEntry(os, IMAGE_LENGTH,     3, 1, image_height);			if (Settings.output_file_type == RGB_IMAGE)			{				writeTiffEntry(os, BITS_PER_SAMPLE,  3, 3, tag_data_offset);				tag_data_offset += BPS_DATA_SIZE;			}			else				writeTiffEntry(os, BITS_PER_SAMPLE,  3, 1, bits_per_sample);			writeTiffEntry(os, PHOTO_INTERP,     3, 1, photo_interp);			writeTiffEntry(os, STRIP_OFFSETS,    4, 1, image_offset);			writeTiffEntry(os, SAMPLES_PER_PIXEL,3, 1, bytes_per_pixel);			writeTiffEntry(os, ROWS_PER_STRIP,   3, 1, image_height);			writeTiffEntry(os, STRIP_BYTE_COUNT, 4, 1, image_size_in_bytes);						os.writeInt(next_IFD);					}		catch (Exception e)		{			throw (e);		}					return;			}// end of writeTiffImageFileDirectory	//*****************************************************************	//*		W R I T E  B I T S  P E R  P I X E L	//*****************************************************************	static void writeBitsPerPixel(DataOutputStream os) throws Exception	{		os.writeShort(8);		os.writeShort(8);		os.writeShort(8);					return;				}// end of writeBitsPerPixel()	//*****************************************************************	//*		G E T  I M A G E  P I X E L S	//*****************************************************************	static int[]	getImagePixels (Image img, Rectangle grab_rect, int bytes_per_pixel) throws Exception	{ 		PixelGrabber	pg = null;		int[]			pixels = null;						pixels = new int[(grab_rect.width * grab_rect.height) * bytes_per_pixel];				//***** Grab the pixels			pg = new PixelGrabber(img, grab_rect.x, grab_rect.y, grab_rect.width, grab_rect.height, pixels, 0, grab_rect.width);		pg.grabPixels();				return(pixels);			}// end of getImagePixels()	//*****************************************************************	//*		G E T  I M A G E  S I Z E  I N  B Y T E S	//*****************************************************************	static int	getImageSizeInBytes(int width, int height) throws Exception	{			int			image_size = 0;				switch (Settings.output_file_type) 		{			case GRAY_8_BIT_IMAGE:				 image_size = image_width * image_height;				 break;			case GRAY_16_BIT_IMAGE:				 image_size = image_width * image_height * 2;			 	break;			case RGB_IMAGE:				 image_size = image_width * image_height * 3;			 	break;			 default:			 	 throw (new Exception("Can't save TIFF file in this format!"));		}// end of switch				return(image_size);			}// end of getImageSize()		} // end of TiffOutput