import java.awt.*;import java.awt.event.*;public class CompParamsDlog extends Dialog{	BooleanWrapper		cancelled = null;	Label 				threshold_label = null;	Label 				p_label= null;	TextField 			threshold_text_field = null;	TextField 			p_text_field= null;	Label 				title_label= null; 	Label 				time_label = null;  	TextField 			time_text_field = null;  	Label 				space_label = null;  	TextField 			space_text_field = null;	Button 				cancel_btn= null;	Button 				ok_btn= null;		GridBagLayout		gb_layout = null;	GridBagConstraints	constraints = null;	Insets				insets = null;	int					text_field_columns = 5;	//**********************************************************************************	//*		I N I T	//*		Last modified 12/30/02 for v1.37	//**********************************************************************************	public CompParamsDlog(Frame parent, boolean modal, BooleanWrapper cancelled_obj)	{		super(parent, modal);		this.cancelled = cancelled_obj;				gb_layout = new GridBagLayout();		constraints = new GridBagConstraints();		insets = new Insets(0,0,0,0);		setLayout(gb_layout);		setVisible(false);		setSize(200, 225);		setForeground(new Color(0));		setBackground(new Color(16777215));		setResizable(false);		title_label = new Label("Compression Parameters:");		//title_label.setLocation(20,10);		//title_label.setSize(163,19);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 2;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 20;		insets.bottom = 15;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(title_label);		gb_layout.setConstraints(title_label, constraints);					p_label = new Label("P:");		//p_label.setLocation(20,35);		//p_label.setSize(24,15);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(p_label);		gb_layout.setConstraints(p_label, constraints);		p_text_field = new TextField();		p_text_field.setColumns(text_field_columns);		//p_text_field.setLocation(115,35);		//p_text_field.setSize(64,22);		constraints.gridx = 1;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(p_text_field);		gb_layout.setConstraints(p_text_field, constraints);		threshold_label = new Label("Threshold:");		//threshold_label.setLocation(20,65);		//threshold_label.setSize(75,20);		constraints.gridx = 0;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(threshold_label);		gb_layout.setConstraints(threshold_label, constraints);						threshold_text_field = new TextField();		threshold_text_field.setColumns(text_field_columns);		//threshold_text_field.setLocation(115,65);		//threshold_text_field.setSize(64,22);		constraints.gridx = 1;		constraints.gridy = 2;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(threshold_text_field);		gb_layout.setConstraints(threshold_text_field, constraints);		time_label = new Label("Time Slices:");		//time_label.setLocation(20, 95);		//time_label.setSize(75, 20);		constraints.gridx = 0;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(time_label);		gb_layout.setConstraints(time_label, constraints);		time_text_field = new TextField();		time_text_field.setColumns(text_field_columns);		//time_text_field.setLocation(115, 95);		//time_text_field.setSize(64, 22);		constraints.gridx = 1;		constraints.gridy = 3;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(time_text_field);		gb_layout.setConstraints(time_text_field, constraints);				space_label = new Label("Space Slices:");		//space_label.setLocation(20, 125);		//space_label.setSize(75, 20);		constraints.gridx = 0;		constraints.gridy = 4;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.HORIZONTAL;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(space_label);		gb_layout.setConstraints(space_label, constraints);		space_text_field = new TextField();		space_text_field.setColumns(text_field_columns);		//space_text_field.setLocation(115, 125);		//space_text_field.setSize(64, 22);		constraints.gridx = 1;		constraints.gridy = 4;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(space_text_field);		gb_layout.setConstraints(space_text_field, constraints);		cancel_btn = new Button();		cancel_btn.setLabel("Cancel");		//cancel_btn.setLocation(20,170);		//cancel_btn.setSize(60,23);		constraints.gridx = 0;		constraints.gridy = 5;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 40;		insets.bottom = 20;		insets.left = 20;		insets.right = 0;		constraints.insets = insets;		add(cancel_btn);		gb_layout.setConstraints(cancel_btn, constraints);				ok_btn = new Button();		ok_btn.setLabel("OK");		//ok_btn.setLocation(115,170);		//ok_btn.setSize(60,23);		constraints.gridx = 1;		constraints.gridy = 5;		constraints.gridwidth = 1;		constraints.anchor = GridBagConstraints.WEST;		constraints.fill = GridBagConstraints.NONE;		constraints.weightx = 0;		constraints.weighty = 1;		insets.top = 40;		insets.bottom = 20;		insets.left = 20;		insets.right = 20;		constraints.insets = insets;		add(ok_btn);		gb_layout.setConstraints(ok_btn, constraints);				setTitle("Compression Parameters");		MyActionListener action_listener = new MyActionListener();		ok_btn.addActionListener(action_listener);		cancel_btn.addActionListener(action_listener);				setupDlog();		pack();	}	private void setupDlog()	{		Double d = null;				d = new Double(CompressionSettings.p);		p_text_field.setText(d.toString());		d = new Double(CompressionSettings.threshold);		threshold_text_field.setText(d.toString());		Integer I = new Integer(CompressionSettings.timepoints_per_block);		time_text_field.setText(I.toString());		I = new Integer(CompressionSettings.focalplanes_per_block);		space_text_field.setText(I.toString());				return;		}// end of setupDlog()			private void getResults()	{		try		{			CompressionSettings.p = getDouble(p_text_field, 0.0);			CompressionSettings.threshold = getDouble(threshold_text_field, 0.0);			CompressionSettings.timepoints_per_block = getInt(time_text_field, CompressionSettings.timepoints_per_block);			CompressionSettings.focalplanes_per_block = getInt(space_text_field, CompressionSettings.focalplanes_per_block);		}		catch (Exception e)		{			Settings.image_window.displayMessage("Exception thrown by CompParamsDlog - getResults()");		}		return;			}// end of getResults()			    // Used for addNotify check.	boolean fComponentsAdjusted = false;	public void addNotify()	{  	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the insets		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(insets().left, insets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;	}// end of addNotify()	    public void setVisible(boolean b)	{		if(b)		{			Rectangle bounds = getParent().getBounds();			Rectangle abounds = getBounds();				setLocation(bounds.x + (bounds.width - abounds.width)/ 2,				 bounds.y + (bounds.height - abounds.height)/2);		}		super.setVisible(b);	}	class MyActionListener implements ActionListener	{		public void actionPerformed(ActionEvent event)		{			Object object = event.getSource();			if (object == ok_btn)				okBtn_ActionPerformed(event);			else if (object == cancel_btn)				cancelBtn_ActionPerformed(event);		}	}	//*********************************************************************	//*		O K  B U T T O N	//*		Last modified 12/30/02 for v1.37	//*********************************************************************	void okBtn_ActionPerformed(ActionEvent event)	{		cancelled.setValue(false);		getResults();		setVisible(false);		dispose();	}	//*********************************************************************	//*		C A N C E L  B U T T O N	//*		Last modified 12/30/02 for v1.37	//*********************************************************************	void cancelBtn_ActionPerformed(ActionEvent event)	{		cancelled.setValue(true);		setVisible(false);		dispose();	}			//*********************************************************************	//*		G E T  D O U B L E	//*********************************************************************	double getDouble(TextField field, double default_value) 	{		Double d = null;				try 		{			d = new Double(field.getText());		}		catch (NumberFormatException e) 		{			d = new Double(default_value);		}// if an exception was generated				return(d.doubleValue());			}// end of getDouble()	//*********************************************************************	//*		G E T  I N T	//*********************************************************************	int getInt(TextField field, int default_value) 	{		Integer d = null;				try 		{			d = new Integer(field.getText());		}		catch (NumberFormatException e) 		{			d = new Integer(default_value);		}// if an exception was generated				return(d.intValue());			}// end of getInt()}// end of class CompParamsDlog