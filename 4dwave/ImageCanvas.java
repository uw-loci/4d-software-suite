import java.awt.*;import java.lang.*;import java.util.*;import java.awt.event.*;public class ImageCanvas extends Canvas{	static final int		MAX_SCALED_IMAGE_DIMENSION = 350;		//***** Begin Class Variables	Image					cur_image = null; // the images that the window contains	int						image_width = -1;	int						image_height = -1;	int						scaled_width = -1;	int						scaled_height = -1;	double					scale_factor = 1.0;	Rectangle				image_rect = null;	Point					last_point = null;	boolean					redraw_canvas = true;						//*****************************************************************	//*		I N I T	//*****************************************************************	public ImageCanvas(Image img)	{					setSize(600,400);				  		this.cur_image = null;		this.image_width = 350;		this.image_height = 350;		this.scaled_width = 350;		this.scaled_height = 350;		this.scale_factor = 1.0;		this.image_rect = new Rectangle(0,0,0,0);		this.last_point = new Point(0, 0);		this.redraw_canvas = true;		if (img != null)		{			try			{				setImage(img);			}			catch (Exception e)			{				e.printStackTrace();			}		}		//***** Tell it what events to receive		//enableEvents(AWTEvent.FOCUS_EVENT_MASK);		//enableEvents(AWTEvent.KEY_EVENT_MASK);		enableEvents(AWTEvent.MOUSE_EVENT_MASK);		enableEvents(AWTEvent.MOUSE_MOTION_EVENT_MASK);		//enableEvents(AWTEvent.COMPONENT_EVENT_MASK);		//enableEvents(AWTEvent.WINDOW_EVENT_MASK);		//enableEvents(AWTEvent.ACTION_EVENT_MASK);						//***** Add listeners		MyMouseListener mouse_listener = new MyMouseListener();		this.addMouseListener(mouse_listener);		MyMouseMotionListener mouse_motion_listener = new MyMouseMotionListener();		this.addMouseMotionListener(mouse_motion_listener);							}// end of ImageCanvas()	//*****************************************************************	//*		G E T  I M A G E	//*****************************************************************	public Image getImage()	{		return(this.cur_image);			}// end of getImage()		//*****************************************************************	//*		S E T  I M A G E	//*****************************************************************	public void setImage(Image img) throws Exception	{				int		width = -1, height = -1;						if (img != null)		{			do			{				width = img.getWidth(this);				height = img.getHeight(this);				}			while (width == -1 || height == -1);						setImage(img, width, height); 		}				return;			}// end of setImage()		//*****************************************************************	//*		S E T  I M A G E	//*****************************************************************	public void setImage(Image img, int width, int height) throws Exception	{				int			new_width = -1;		int			new_height = -1;				cur_image = img;				if (img != null && width > 0 && height > 0)		{			image_width = width;			image_height = height;									//***** Keep the image a reasonable size if it happens to be huge			if (image_width > MAX_SCALED_IMAGE_DIMENSION)			{				scale_factor = (double)MAX_SCALED_IMAGE_DIMENSION/(double)image_width;			}			else if (image_height > MAX_SCALED_IMAGE_DIMENSION)			{				scale_factor = (double)MAX_SCALED_IMAGE_DIMENSION/(double)image_height;			}			else				scale_factor = 1.0;										new_width = (int)((double)image_width * scale_factor);			new_height = (int)((double)image_height * scale_factor);							//***** If this image is a different size than the previous image, we'll redraw the whole canvas			if (new_width != scaled_width || new_height != scaled_height)			{				scaled_width = new_width;				scaled_height = new_height;				redraw_canvas = true;			}							image_rect.width = scaled_width;			image_rect.height = scaled_height;						 		}// if the image is not null and has a width and height > 0 							return;			}// end of setImage()			//*****************************************************************	//*		D I S P L A Y  I M A G E	//*****************************************************************	public void displayImage(Image img) throws Exception	{		int		width = -1, height = -1;						if (img != null)		{			do			{				width = img.getWidth(this);				height = img.getHeight(this);				}			while (width == -1 || height == -1);						displayImage(img, width, height); 		} 		 		return;	}// end of displayImage()	//*****************************************************************	//*		D I S P L A Y  I M A G E	//*****************************************************************	public void displayImage(Image img, int width, int height) throws Exception	{		setImage(img, width, height);		//***** If we're changing the size of the image from what it was, redraw the whole canvas		//	    otherwise, just redraw the image.  This prevents unnecessary "flashing".		if (redraw_canvas)		{			repaint();			redraw_canvas = false;		}		else			restoreImage(null);				return;			}// end of displayImage()				//*****************************************************************	//*		G E T  I M A G E  R E C T	//*****************************************************************	public Rectangle getImageRect()	{			Rectangle image_rect = null;				image_rect = new Rectangle(this.image_rect);				return(image_rect);			}// end of getImageRect()		//*****************************************************************	//*		G E T  I M A G E  S I Z E	//*		Added 12/6/02 for v1.36	//*****************************************************************	public Dimension getImageSize()	{							return(new Dimension(this.image_width, this.image_height));			}// end of getImageSize()		//*****************************************************************	//*		G E T  S C A L E D  I M A G E  S I Z E	//*****************************************************************	public Dimension getScaledImageSize()	{							return(new Dimension(this.scaled_width, this.scaled_height));			}// end of getScaledImageSize()		//*****************************************************************	//*		S E T  I M A G E  W I D T H	//*****************************************************************	public void setImageWidth(int w)	{			this.image_width = w;		return;			}// end of setImageWidth()		//*****************************************************************	//*		S E T  I M A G E  H E I G H T	//*****************************************************************	public void setImageHeight(int h)	{			this.image_height = h;		return;			}// end of setImageHeight()					//********************************************************************************	//*		U P D A T E	//********************************************************************************		public void update(Graphics g)	{		paint(g);				return;			}// end of update()	//********************************************************************************	//*		P A I N T	//*		Last modified 12/6/02 for v1.36	//********************************************************************************		public void paint(Graphics g)	{							super.paint(g);				try		{			//***** Draw the grey stuff around the image			drawSurroundingArea(g);					//***** Restore the window's image, if there is one			restoreImage(g);				}		catch (Exception e)		{			Settings.image_window.displayMessage("Exception caught while repainting image canvas!");			if (e.getMessage() != null)				Settings.image_window.displayMessage(e.getMessage());		}					return;													}// end of paint()				//********************************************************************************	//*		D R A W  S U R R O U N D I N G  A R E A	//********************************************************************************		public	void	drawSurroundingArea(Graphics incoming_graphics) throws Exception	{		Rectangle		image_rect = new Rectangle(0,0,0,0);		Rectangle		top_rect = new Rectangle(), bottom_rect = new Rectangle();		Rectangle		left_rect = new Rectangle(), right_rect = new Rectangle();		int				margin = 4;		Graphics 		g = null;				if (incoming_graphics == null)			g = this.getGraphics();		else			g = incoming_graphics;					//****** Fill the background with light gray		g.setColor(Color.gray);		g.fillRect(0, 0, getSize().width, getSize().height);									image_rect.width = this.scaled_width;		image_rect.height = this.scaled_height;		image_rect.x = this.getSize().width/2 - (this.scaled_width/2);		image_rect.y = this.getSize().height/2 - (this.scaled_height/2);			g.setColor(Color.white);		g.fillRect(image_rect.x, image_rect.y, image_rect.width, image_rect.height);		//***** Draw the recessed box around it		top_rect.x = image_rect.x - margin;		top_rect.y = image_rect.y - margin;		top_rect.width = image_rect.width + (2 * margin);		top_rect.height = margin;		g.setColor(Color.darkGray);		g.fillRect(top_rect.x, top_rect.y, top_rect.width, top_rect.height);				left_rect.x = image_rect.x - margin;		left_rect.y = image_rect.y;		left_rect.width = margin;		left_rect.height = image_rect.height + margin;		g.setColor(Color.darkGray);		g.fillRect(left_rect.x, left_rect.y, left_rect.width, left_rect.height);				bottom_rect.x = image_rect.x;		bottom_rect.y = image_rect.y + image_rect.height;		bottom_rect.width = image_rect.width + margin;		bottom_rect.height = margin;		g.setColor(Color.lightGray);		g.fillRect(bottom_rect.x, bottom_rect.y, bottom_rect.width, bottom_rect.height);		right_rect.x = image_rect.x + image_rect.width;		right_rect.y = image_rect.y;		right_rect.width = margin;		right_rect.height = image_rect.height;		g.setColor(Color.lightGray);		g.fillRect(right_rect.x, right_rect.y, right_rect.width, right_rect.height);				//***** Draw a black bounding box		g.setColor(Color.black);		g.drawRect(0, 0, getSize().width - 1, getSize().height - 1);				if (incoming_graphics == null)			g.dispose();					return;			}// end of drawSurroundingArea()		//********************************************************************************	//*		R E S T O R E  I M A G E	//*		Either restores image into the update_rect, or	//*		if update_rect is null, restores into the entire window	//********************************************************************************		public	void	restoreImage (Graphics incoming_graphics) throws Exception	{		Graphics	g = null;							try		{				if (incoming_graphics == null)				g = this.getGraphics();			else				g = incoming_graphics;							//***** Draw the image into that intersection			if (cur_image != null && g != null)			{				//Settings.image_window.displayMessage("Displaying image... " + "W: " + scaled_width + " H: " + scaled_height);				//***** Draw the scaled image into the center of the canvas					g.drawImage(cur_image, 							this.getSize().width/2 - (scaled_width/2), 							this.getSize().height/2 - (scaled_height/2), 							scaled_width, 							scaled_height, null); 						if (incoming_graphics == null)					g.dispose(); // get rid of graphics context						}// if we have an image		}// try		catch (OutOfMemoryError e)		{			Settings.image_window.displayMessage("Not enough memory to display image.");			System.gc(); // run the garbage collector		}		catch (Exception e)		{			throw(e);		}				return;		}// end of restoreImage()		class MyMouseListener extends MouseAdapter	{		public void mouseClicked(MouseEvent event)		{		}		public void mousePressed(MouseEvent event)		{			doMousePressed(event);		}		public void mouseReleased(MouseEvent event)		{			doMouseReleased(event);		}	}// MyMouseAdapter	public void doMousePressed(MouseEvent event)	{		int		x = 0,  y = 0;			x = event.getX();		y = event.getY();							return;	}	public  void  doMouseReleased(MouseEvent event)	{		return;	}			class MyMouseMotionListener extends MouseMotionAdapter	{		public void mouseMoved(MouseEvent event)		{		}		public void mouseDragged(MouseEvent event)		{			doMouseDragged(event);		}	}// MyMouseMotionListener		public void doMouseDragged(MouseEvent event)	{		int		x = 0,  y = 0;			x = event.getX();		y = event.getY();			return;	}						}//End of ImageCanvas