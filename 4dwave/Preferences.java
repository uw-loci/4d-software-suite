import java.awt.*;import java.io.*;import java.util.*;class		Preferences	{		//***********************************************************************	//*		S A V E  P R E F E R E N C E S	//***********************************************************************		static	void	savePreferences()	{		Properties			props = null;		FileOutputStream	os = null;		FileDialog			fd = null;		String				output_filename = null, output_directory = null;		String				property = null;				try		{			//***** Build the properties file			props = new Properties();			saveToProperties(props);						//***** Save the properties file to disk			if (Settings.prefs_directory != null && Settings.prefs_filename != null)			{				props.put("4DWaveletProcessor.prefs_directory", Settings.prefs_directory);				props.put("4DWaveletProcessor.prefs_filename", Settings.prefs_filename);				os = new FileOutputStream(Settings.prefs_directory + Settings.prefs_filename);				props.save(os, Settings.prefs_filename);			}			else			{				//***** Ask where to save the file				fd = new FileDialog(Settings.image_window, "Save Preferences...", FileDialog.SAVE);				fd.setFile("4D Wavelet Processor Prefs");				fd.setVisible(true);				output_filename = fd.getFile();				output_directory = fd.getDirectory();				fd.dispose();								Settings.prefs_directory = new String(output_directory);				Settings.prefs_filename = new String(output_filename);				props.put("4DWaveletProcessor.prefs_directory", Settings.prefs_directory);				props.put("4DWaveletProcessor.prefs_filename", Settings.prefs_filename);								if (output_filename != null)				{					os = new FileOutputStream(output_directory + output_filename);					props.save(os, Settings.prefs_filename);				}							}					}// try		catch (Exception e)		{			e.printStackTrace();			}				return;			}// end of savePreferences			//***********************************************************************	//*		L O A D  P R E F E R E N C E S	//*		if auto_load is true, the method will look in the directory that	//*		is in the Settings.input_directory string and load a file called 	//*		"4D Wavelet Processor Prefs".  If it's false, it will first try 	//*		that method, then if it fails, it will ask the user which prefs 	//*		file to load.	//***********************************************************************		static	void	loadPreferences(boolean auto_load)	{		Properties			props = null;		FileInputStream		is = null;		FileDialog			fd = null;		String				input_filename = null, input_directory = null;		String				property = null, key = null;		Integer				int_obj = null;		boolean				loaded = false;				props = new Properties();		//***** Try the default setting		try		{			if (Settings.prefs_directory != null && Settings.prefs_filename != null)			{				input_directory = new String(Settings.prefs_directory);				input_filename = new String(Settings.prefs_filename);				}			else			{				props = System.getProperties();				key = "user.dir"; 				input_directory = props.getProperty(key);				input_filename = new String("4D Wavelet Processor Prefs");			}			is = new FileInputStream(input_directory + input_filename);			props.load(is);			loaded = true;		}// try		catch (Exception e)		{		}// catch			//***** Ask the user if it can't find the default file		if (!loaded && !auto_load)		{			IOUtils.putMessage(Settings.image_window, "Open the prefs file.");			fd = new FileDialog(Settings.image_window, "Open 4D Wavelet Processor Prefs...", FileDialog.LOAD);			fd.setVisible(true);			input_filename = fd.getFile();			input_directory = fd.getDirectory();			fd.dispose();						if (input_filename != null)			{				try				{					is = new FileInputStream(input_directory + input_filename);					props.load(is);					loaded = true;				}// try				catch (Exception e)				{				}			}// if we have a filename			else				return;		}// if we didn't load yet						if (loaded)		{			//***** Restore settings from the properties object			loadFromProperties(props);			Settings.prefs_directory = new String(input_directory);			Settings.prefs_filename = new String(input_filename);		}// if we loaded the prefs file			return;				}// end of loadPreferences		   public static void saveToProperties(Properties p)   {      		//***** Setttings		p.put("4DWaveletProcessor.input_directory",Settings.input_directory+"");		p.put("4DWaveletProcessor.output_directory",Settings.output_directory+"");		p.put("4DWaveletProcessor.desired_compression_ratio",Settings.desired_compression_ratio+"");      		//***** Compression settings		p.put("4DWaveletProcessor.p",CompressionSettings.p+"");        p.put("4DWaveletProcessor.threshold",CompressionSettings.threshold+"");        p.put("4DWaveletProcessor.timepoints_per_block",CompressionSettings.timepoints_per_block+"");        p.put("4DWaveletProcessor.focalplanes_per_block",CompressionSettings.focalplanes_per_block+"");            return;         }// end of saveToProperties()         public static void loadFromProperties(Properties p)   {		//***** Settings		Settings.input_directory = p.getProperty("4DWaveletProcessor.input_directory");		Settings.output_directory = p.getProperty("4DWaveletProcessor.output_directory");		Settings.desired_compression_ratio = Double.valueOf(p.getProperty("4DWaveletProcessor.desired_compression_ratio")).longValue();		   		//***** Compression settings		CompressionSettings.p  = Double.valueOf(p.getProperty("4DWaveletProcessor.p")).longValue();		CompressionSettings.threshold  = Double.valueOf(p.getProperty("4DWaveletProcessor.threshold")).longValue();		CompressionSettings.timepoints_per_block  = Integer.parseInt(p.getProperty("4DWaveletProcessor.timepoints_per_block"));		CompressionSettings.focalplanes_per_block = Integer.parseInt(p.getProperty("4DWaveletProcessor.focalplanes_per_block"));                  return;         }// end of loadFromProperties()}// end of preferences