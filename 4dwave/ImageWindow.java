/*	4D Wavelet Processor	    v1.38	   1/14/03		Written by Charles Thomas and H. Narfi Stefansson	University of Wisconsin - Madison	1675 Observatory Dr.	Madison, WI  53706	cthomas@facstaff.wisc.edu */import java.awt.*;import java.awt.event.*;import java.awt.image.*;import java.io.*;import java.util.*;import java.net.*;public class ImageWindow extends Frame{		ImageCanvas 		image_canvas = null;	InfoPanel			info_panel = null;	StatusPanel			status_panel = null;	// MENUS	MenuBar 			main_menu_bar = null;	Menu 				file_menu = null;	MenuItem 				save_prefs_item = null;	MenuItem 				load_prefs_item = null;	MenuItem				print_menu_item = null;	MenuItem 				quit_menu_item = null;	Menu 				process_menu = null;	MenuItem 				compress_data_set_item = null;	MenuItem				decompress_data_set_item = null;	MenuItem				estimate_threshold_item = null;	//MenuItem				compress_from_URL_item = null;	MenuItem				decompress_from_URL_item = null;	Menu 				help_menu = null;	MenuItem 				about_menu_item = null;	MenuItem				test_menu_item = null;			String				version = new String("v1.38");	//*******************************************************************	//*		I N I T	//*		Last modified 9/17/02 for v1.34	//*******************************************************************	public ImageWindow()	{		GridBagLayout		gbl = null;		GridBagConstraints	constraints = null;		Insets				insets = null;					Settings.image_window = this;				Settings.running_as_applet = ProcessorApplet.getInstance() != null;				gbl = new GridBagLayout();		constraints = new GridBagConstraints();		setLayout(gbl);		insets = new Insets(0,0,0,0);							setTitle("4D Wavelet Processor " + version);		setResizable(false);		setVisible(false);		setSize(600,700);				setFont(new Font("Dialog", Font.PLAIN, 12));		setForeground(new Color(0));		setBackground(new Color(16777215));		try		{			setupMenus();		}		catch (Exception e)		{			displayMessage("Exception thrown while setting up menus!");		}			image_canvas = new ImageCanvas(null);		image_canvas.setSize(600, 400);		constraints.gridx = 0;		constraints.gridy = 0;		constraints.gridwidth = 2;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.NORTHWEST;		constraints.fill = GridBagConstraints.BOTH;		constraints.weightx = 0;		constraints.weighty = 0;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(image_canvas);		gbl.setConstraints(image_canvas, constraints);		Settings.image_canvas = image_canvas;				info_panel = new InfoPanel();		info_panel.setSize(300,320);		constraints.gridx = 0;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.NORTHWEST;		constraints.fill = GridBagConstraints.BOTH;		constraints.weightx = 0;		constraints.weighty = 0;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(info_panel);		gbl.setConstraints(info_panel, constraints);		status_panel = new StatusPanel();		status_panel.setSize(300, 320);		constraints.gridx = 1;		constraints.gridy = 1;		constraints.gridwidth = 1;		constraints.gridheight = 1;		constraints.anchor = GridBagConstraints.NORTHWEST;		constraints.fill = GridBagConstraints.BOTH;		constraints.weightx = 1;		constraints.weighty = 1;		insets.top = 0;		insets.bottom = 0;		insets.left = 0;		insets.right = 0;		constraints.insets = insets;		add(status_panel);		gbl.setConstraints(status_panel, constraints);		Settings.status_panel = status_panel;		try		{			setupListeners();		}		catch (Exception ex)		{			displayMessage("Exception thrown while setting up listeners!");		}							displayMessage("Welcome to 4D Wavelet Processor " + version);				pack();				return;	}//init			//*******************************************************************	//*		S E T  V I S I B L E	//*******************************************************************    public void setVisible(boolean b)	{		if(b)		{			setLocation(20, 20);		}		super.setVisible(b);	}// end of setVisible()		//*******************************************************************	//*		M A I N	//*		Last modified 5/20/02	//*******************************************************************	static public void main(String args[])	{		ImageWindow   iw = null;				iw = new ImageWindow();		iw.setVisible(true);		Preferences.loadPreferences(true);				//if (args != null && args[0] != null)		//	iw.displayMessage(args[0]);				return;			}// end of main()	//*******************************************************************	//*		A D D  N O T I F Y	//*		Last modified 9/17/02 for v1.34	//*******************************************************************	public void addNotify()	{	    // Record the size of the window prior to calling parents addNotify.	    Dimension d = getSize();	    		super.addNotify();		if (fComponentsAdjusted)			return;		// Adjust components according to the getInsets		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);		Component components[] = getComponents();		for (int i = 0; i < components.length; i++)		{			Point p = components[i].getLocation();			p.translate(getInsets().left, getInsets().top);			components[i].setLocation(p);		}		fComponentsAdjusted = true;		return;	}    // Used for addNotify check.	boolean fComponentsAdjusted = false;	class MyWindowAdapter extends WindowAdapter	{		public void windowClosing(WindowEvent event)		{			Object object = event.getSource();			if (object == ImageWindow.this)				ImageWindow_WindowClosing(event);		}		public void windowActivated(WindowEvent event)		{			Object object = event.getSource();			if (object == ImageWindow.this)				ImageWindow_WindowActivated(event);		}	}		void ImageWindow_WindowClosing(WindowEvent event)	{		setVisible(false);		 // hide the Frame		System.exit(0);		return;	}	void ImageWindow_WindowActivated(WindowEvent event)	{		requestFocus();		return;	}	public void update(Graphics g)	{		super.update(g);				paint(g);	}			public void paint(Graphics g)	{		int		win_width = 0, win_height = 0;		int		image_height = 0, image_width = 0;		int		scaled_width = 0, scaled_height = 0;		double	scale_factor = 0.0;		super.paint(g);				//***** Determine the image size		image_width = image_canvas.getImageSize().width;		image_height = image_canvas.getImageSize().height;					scaled_width = image_canvas.getScaledImageSize().height;		scaled_height = image_canvas.getScaledImageSize().height;						//*** Get new window dimensions		if (scaled_width > (info_panel.getSize().width + (2 * info_panel.getLocation().x)))			win_width = image_width;		else			win_width = info_panel.getSize().width + (2 * info_panel.getLocation().x);		win_height = scaled_height + info_panel.getSize().height;			}	class MyActionListener implements ActionListener	{		public void actionPerformed(ActionEvent event)		{			Object object = event.getSource();			if (object == about_menu_item)				about_menu_item_Action(event);			else if (object == print_menu_item)				print_menu_item_Action(event);			else if (object == quit_menu_item)				quit_menu_item_Action(event);			else if (object == save_prefs_item)				savePrefsItem_ActionPerformed(event);			else if (object == compress_data_set_item)				compressDataSetItem_ActionPerformed(event);			else if (object == decompress_data_set_item)				decompressDataSetItem_ActionPerformed(event);			else if (object == estimate_threshold_item)				estimateThresholdItem_ActionPerformed(event);			//else if (object == compress_from_URL_item)			//	compressFromURLItem_ActionPerformed(event);			else if (object == decompress_from_URL_item)				decompressFromURLItem_ActionPerformed(event);			else if (object == load_prefs_item)				load_prefs_item_ActionPerformed(event);							else if (test_menu_item != null && object == test_menu_item)				testItem_ActionPerformed(event);		}	}		void about_menu_item_Action(ActionEvent event)	{		(new AboutDialog(this, true)).setVisible(true);	}	void print_menu_item_Action(ActionEvent event)	{		return;				}		void quit_menu_item_Action(ActionEvent event)	{		BooleanWrapper		confirmed = new BooleanWrapper(false);		QuitDialog			qd = null;				qd = new QuitDialog(confirmed, this, true);		qd.setVisible(true);				if (confirmed.getValue())		{			Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));			System.exit(0);		}			}	void savePrefsItem_ActionPerformed(ActionEvent event)	{		Preferences.savePreferences();	}	void load_prefs_item_ActionPerformed(ActionEvent event)	{		Preferences.loadPreferences(false);	}	//***************************************************************************	//*		C O M P R E S S  D A T A  S E T  I T E M	//*		Last modified 6/24/02	//***************************************************************************	void compressDataSetItem_ActionPerformed(ActionEvent event)	{		DataCompressor		dc = null;		ImageReader			image_io_handler = null;				try		{			Settings.use_URL = false;						//***** Open the first timepoint				image_io_handler = getImageIOHandler("Open the first timepoint.");			if (image_io_handler != null)				dc = new DataCompressor(image_io_handler);						if (dc == null)				throw new Exception();		}// try		catch (CancelledException ce)		{			displayMessage("Compression was cancelled.");			return;		}		catch (Exception e)		{			displayMessage("Unable to open the first timepoint!");			displayMessage("File may be invalid, named improperly, or unsupported.");			displayMessage("Please consult user manual.");			e.printStackTrace();			return;		}				dc.processData();		return;	}		//***************************************************************************	//*		D E C O M P R E S S  D A T A  S E T  I T E M	//*		Last modified 6/24/02	//***************************************************************************	void decompressDataSetItem_ActionPerformed(ActionEvent event)	{		DataDecompressor   dd = null;		try		{			Settings.use_URL = false;						dd = new DataDecompressor();			dd.openBitfile();			}		catch (CancelledException ce)		{			displayMessage("Decompression was cancelled.");			return;		}		catch (Exception e)		{			displayMessage("Unable to open the first bitfile for decompression!");			displayMessage("File may not be a valid bitfile,");			displayMessage("or may be named incorrectly.");			displayMessage("Please consult user manual.");			e.printStackTrace();			return;		}				dd.processData();				return;	}// end of decompressDataSetItem()	//***************************************************************************	//*		E S T I M A T E  T H R E S H O L D  S E T  I T E M	//*		Last modified 6/24/02	//***************************************************************************	void estimateThresholdItem_ActionPerformed(ActionEvent event)	{		ThresholdEstimator	te = null;		ImageReader			image_reader = null;		BooleanWrapper		cancelled = new BooleanWrapper(false);		try		{			Settings.use_URL = false;						//***** Open the first timepoint				image_reader = getImageIOHandler("Open the first timepoint.");			if (image_reader != null)				te = new ThresholdEstimator(image_reader);			if (te == null)				throw new Exception();		}		catch (CancelledException ce)		{			displayMessage("Threshold estimation was cancelled.");			return;		}		catch (Exception e)		{			displayMessage("Unable to open first file for threshold estimation!");			displayMessage("File may be invalid, named improperly, or unsupported.");			displayMessage("Please consult user manual.");			e.printStackTrace();			return;		}				te.processData();				return;	} // end of estimateThresholdItem()		//***************************************************************************	//*		C O M P R E S S  F R O M  U R L  I T E M	//*		Last modified 7/15/02 for v1.33	//***************************************************************************	void compressFromURLItem_ActionPerformed(ActionEvent event)	{		DataCompressor   dc = null;		ImageReader		image_reader = null;		GStrDlog		gsd = null;		String			test_data_address = null;		StringWrapper	return_str = new StringWrapper();		BooleanWrapper	cancelled = new BooleanWrapper(false);		String			default_filename = "Filename?";		String[]		url_array = {"http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/Tiff_Data/",						 			 "http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/Biorad_Data/",						 			 "http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/RGB_Biorad_Data/"};				try		{									       			//***** Get the directory URL			gsd = new GetURLDlog(this, true, "Enter input directory URL:", 					 		     url_array[0], return_str, url_array);					 		   			gsd.setVisible(true);						if (return_str.getString() == null)			{				displayMessage("Compression was cancelled.");				return;			}			Settings.input_directory_url_string = return_str.getString();						if (return_str.getString().equals("http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/Tiff_Data/"))				default_filename = new String("EyeData1.tif");			if (return_str.getString().equals("http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/Biorad_Data/"))				default_filename = new String("File1.PIC");			if (return_str.getString().equals("http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/RGB_Biorad_Data/"))				default_filename = new String("800102.PIC");									return_str = new StringWrapper();							//***** Get the file name			gsd = new GStrDlog(this, true, "Enter filename to open:",							   default_filename, return_str);			gsd.setVisible(true);							if (return_str.getString() == null)			{				displayMessage("Compression was cancelled.");				return;			}			Settings.input_filename = return_str.getString();			if (return_str.getString() == null)				return;						try			{				Settings.input_url = new URL(Settings.input_directory_url_string + Settings.input_filename);			}			catch (MalformedURLException mue)			{				throw mue;			}											Settings.use_URL = true;						//***** Open the first timepoint				image_reader = getImageIOHandler("Open the first timepoint.");			if (image_reader != null)				dc = new DataCompressor(image_reader);			else				displayMessage("Unable find an image reader for this file type!");		}// try		catch (CancelledException ce)		{			displayMessage("Compression was cancelled.");			return;		}		catch (Exception e)		{			Settings.input_directory_url_string = null;			Settings.input_url = null;			Settings.input_filename = null;			Settings.use_URL = false;						displayMessage("Unable to open the first timepoint!");			displayMessage("URL may be invalid or file may be named improperly.");			displayMessage("Please consult user manual.");			e.printStackTrace();			return;		}			dc.processData();			return;			}// end of compressFromURLItem_ActionPerformed()		//***************************************************************************	//*		D E C O M P R E S S  F R O M  U R L  I T E M	//*		Last modified 6/28/02	//***************************************************************************	void decompressFromURLItem_ActionPerformed(ActionEvent event)	{		DataDecompressor	ddc = null;		GStrDlog			gsd = null;		String				test_data_address = null;		StringWrapper		return_str = new StringWrapper();		BooleanWrapper		cancelled = new BooleanWrapper(false);		String				url_array[] = {"http://www.loci.wisc.edu/4dtest/4DWP_Test_Data/Bitfile_Data/"};				try		{			//***** Get the directory URL			gsd = new GetURLDlog(this, true, "Enter input directory URL:", url_array[0], return_str, url_array);			gsd.setVisible(true);						if (return_str.getString() == null)			{				displayMessage("Decompression was cancelled.");				return;			}							Settings.input_directory_url_string = return_str.getString();						return_str = new StringWrapper();							//***** Get the file name			gsd = new GStrDlog(this, true, "Enter filename to open:",							   "EyeData_0001.bit", return_str);			gsd.setVisible(true);							if (return_str.getString() == null)			{				displayMessage("Decompression was cancelled.");				return;			}			Settings.input_filename = return_str.getString();			if (return_str.getString() == null)				return;						try			{				Settings.input_url = new URL(Settings.input_directory_url_string + Settings.input_filename);			}			catch (MalformedURLException mue)			{				throw mue;			}											Settings.use_URL = true;						//***** Open the first timepoint				ddc = new DataDecompressor();		}// try		catch (Exception e)		{			Settings.input_directory_url_string = null;			Settings.input_url = null;			Settings.input_filename = null;			Settings.use_URL = false;						displayMessage("Unable to open the first timepoint!");			displayMessage("URL may be invalid or file may be named improperly.");			displayMessage("Please consult user manual.");			e.printStackTrace();			return;		}			ddc.processData();			return;			}// end of decompressFromURLItem_ActionPerformed()		//***************************************************************************	//*		T E S T  I T E M	//*		Last modified 5/7/02	//***************************************************************************	void testItem_ActionPerformed(ActionEvent event)	{		//AboutDialog		dialog = new AboutDialog(Settings.image_window, false);		//ChannelsDlog		dialog = new ChannelsDlog(Settings.image_window, new BioradRGBSettings(), false);		//ProcInfoDlog		dialog = new ProcInfoDlog(Settings.image_window, false, new BooleanWrapper());		//CompInfoDlog		dialog = new CompInfoDlog(Settings.image_window, false, new BooleanWrapper());		//CompParamsDlog	dialog = new CompParamsDlog(Settings.image_window, false, new BooleanWrapper());		//GStrDlog			dialog = new GStrDlog(Settings.image_window, false, "Baby, what you want me to do?", 		//			 							  "Ease on down the road.", new StringWrapper());		//PutMsgDlog		dialog = new PutMsgDlog(Settings.image_window, false, "Baby, what you want me to do?");		//ThreshEstDlog		dialog = new ThreshEstDlog(Settings.image_window, false, new BooleanWrapper());		//DecompInfoDlog	dialog = new DecompInfoDlog(Settings.image_window, false, new BooleanWrapper());						 											//dialog.setVisible(true);				return;	}	//*******************************************************************	//*		S E T U P  M E N U S	//*		Last modified 12/30/02	//*******************************************************************	private	void setupMenus() throws Exception	{		main_menu_bar = new MenuBar();				// File Menu		file_menu = new Menu("File");		save_prefs_item = new MenuItem("Save Preferences");		file_menu.add(save_prefs_item);		load_prefs_item = new MenuItem("Load Preferences");		file_menu.add(load_prefs_item);		file_menu.addSeparator();				print_menu_item = new MenuItem("Print...");		print_menu_item.setEnabled(false);		print_menu_item.setShortcut(new MenuShortcut(KeyEvent.VK_P,false));		file_menu.add(print_menu_item);				quit_menu_item = new MenuItem("Quit");		quit_menu_item.setShortcut(new MenuShortcut(KeyEvent.VK_Q,false));		file_menu.add(quit_menu_item);		main_menu_bar.add(file_menu);				// Process Menu		process_menu = new Menu("Process");			compress_data_set_item = new MenuItem("Compress Data Set");			process_menu.add(compress_data_set_item);			decompress_data_set_item = new MenuItem("Decompress Data Set");			process_menu.add(decompress_data_set_item);			estimate_threshold_item = new MenuItem("Estimate Threshold");			process_menu.add(estimate_threshold_item);			process_menu.addSeparator();			//compress_from_URL_item = new MenuItem("Compress From URL");			//process_menu.add(compress_from_URL_item);			decompress_from_URL_item = new MenuItem("Decompress From URL");			process_menu.add(decompress_from_URL_item);		main_menu_bar.add(process_menu);		// Help Menu		help_menu = new Menu("Help");		main_menu_bar.setHelpMenu(help_menu);		about_menu_item = new MenuItem("About..");		help_menu.add(about_menu_item);		//***** TEST TEST TEST TEST TEST		test_menu_item = new MenuItem("Test!");		help_menu.add(test_menu_item);		//***** TEST TEST TEST TEST TEST		main_menu_bar.add(help_menu);				setMenuBar(main_menu_bar);				return;			}// end of setupMenus()			//*******************************************************************	//*		S E T U P  L I S T E N E R S	//*		Last modified 5/30/02	//*******************************************************************	private void setupListeners() throws Exception	{		MyWindowAdapter window_adapter = new MyWindowAdapter();		this.addWindowListener(window_adapter);		MyActionListener action_listener = new MyActionListener();		about_menu_item.addActionListener(action_listener);		print_menu_item.addActionListener(action_listener);		quit_menu_item.addActionListener(action_listener);		save_prefs_item.addActionListener(action_listener);		compress_data_set_item.addActionListener(action_listener);		decompress_data_set_item.addActionListener(action_listener);		estimate_threshold_item.addActionListener(action_listener);		//compress_from_URL_item.addActionListener(action_listener);		decompress_from_URL_item.addActionListener(action_listener);		load_prefs_item.addActionListener(action_listener);		if (test_menu_item != null)			test_menu_item.addActionListener(action_listener);					return;			}// end of setupListeners()			//******************************************************************	//*			G E T  I M A G E  I O  H A N D L E R	//*			Last modified 6/24/02	//******************************************************************	ImageReader	getImageIOHandler(String title) throws CancelledException, Exception	{		FileDialog			fd = null;		Image				img = null;		ImageReader			image_reader = null;						if (!Settings.use_URL)		{			fd = new FileDialog(Settings.image_window, title);			fd.setMode(FileDialog.LOAD);			fd.setVisible(true);						if (fd.getFile() == null)				throw new CancelledException();							Settings.input_filename = fd.getFile();			Settings.input_directory = fd.getDirectory();			Settings.output_directory = fd.getDirectory();		}				if (Settings.input_filename != null)		{			//***** Get filename info			Settings.filename_syntax = NameUtils.findFilenameSyntax(Settings.input_filename);				Settings.base_timepoint_name = NameUtils.findBaseFileName(Settings.input_filename);			Settings.first_timepoint = NameUtils.findSequentialNumber(Settings.input_filename);			Settings.file_extension = NameUtils.findExtension(Settings.input_filename);			Settings.current_timepoint = Settings.first_timepoint;									if (Settings.filename_syntax == NameUtils.BIORAD_1024_FILE)			{				if (!Settings.use_URL)					return(new BioradRGBReader());				else					return(new URLBioradRGBReader());			}// if filename was biorad 1024 syntax						else if (Settings.filename_syntax == NameUtils.BIORAD_600_FILE)			{				if (!Settings.use_URL)					return(new BioradReader());				else					return(new URLBioradReader());			}// if filename was biorad 600 syntax						//***** Try as JPEG			else if (Settings.filename_syntax == NameUtils.JPEG_FILE)			{								if (!Settings.use_URL)					return(new JPEGReader());				else					throw new Exception("JPEGs are not yet supported via the web.");			}// try as jpeg						//***** Try as TIFF			else if (Settings.filename_syntax == NameUtils.TIFF_FILE)			{				if (!Settings.use_URL)					return(new TiffReader());				else					return(new URLTiffReader());							}// try as tiff			else				displayMessage("This file is either unsupported or named incorrectly.");								}// if we got a file		else		{			throw new Exception("No input file specified.");		}				return(null);						}// getImageIOHandler()			//*****************************************************************************	//*		D I S P L A Y  M E S S A G E	//*		Last modified 9/23/02 for v1.35	//*****************************************************************************	public void displayMessage(String msg)	{		try		{			if (this.info_panel != null)				info_panel.messages_panel.displayMessage(msg);		}// try		catch (Exception e)		{				}				return;				}// end of displayMessage()	//*****************************************************************************	//*		D I S P L A Y  I M A G E	//*****************************************************************************	public void displayImage(Image img)	{		if (this.info_panel != null)			info_panel.title_canvas.setImage(img);				return;				}// end of displayMessage()	}// end of ImageWindow class