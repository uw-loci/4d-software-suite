import java.awt.*;import java.io.*;class NameUtils{			//***** FILENAME SYNTAX CONSTANTS	final   static   int			TIFF_FILE = 0;	final   static   int			BIORAD_600_FILE = 1;	final   static   int			BIORAD_1024_FILE = 2;	final	static	 int			WAVELET_BITFILE = 3;	final	static   int			JPEG_FILE = 4;	final   static   int			UNKNOWN_FILE = -1;		//***** OTHER CONSTANTS	final	static	 int			NOT_FOUND = -1;			//*************************************************************************	//*		C R E A T E  M O V I E  N A M E	//*		Returns a name in the format "FocalPlane1", "FocalPlane2", ...	//*************************************************************************	static String createMovieName(String base_name, int focal_plane)	{		String  movie_name = new String(base_name);				movie_name += focal_plane;				return(movie_name);			}// end of createMovieName()	//*************************************************************************	//*		C R E A T E  I N P U T  F I L E N A M E	//*		Last modified 6/13/02	//*************************************************************************	static String createInputFilename(String base_name, int sequential_num, int filename_syntax, int channel)	{		String		filename = null;				switch (filename_syntax)		{			case TIFF_FILE:				 filename = createTiffName(base_name, sequential_num);				  break;			case BIORAD_600_FILE:				 filename = createBioradName(base_name, sequential_num);				  break;			case BIORAD_1024_FILE:					 filename = createBioradRGBName(base_name, sequential_num, channel);				 break;			case WAVELET_BITFILE:				 filename = createBitfileName(base_name, sequential_num);				 break;			case JPEG_FILE:				 filename = createJPEGName(base_name, sequential_num);				 break;		}// switch				return(filename);			}// end of createInputFilename()	//*************************************************************************	//*		C R E A T E  T I F F   N A M E	//*		Last modified 6/13/02	//*************************************************************************	static	String createTiffName(String base_name, int timepoint)	{			String final_name = new String(base_name);		final_name += timepoint;				if (Settings.file_extension != null && (Settings.file_extension.startsWith(".t") || Settings.file_extension.startsWith(".T")))			final_name += Settings.file_extension;		else			final_name += ".TIF";				return(final_name);					}// end of createTiffName()		//*************************************************************************	//*		C R E A T E  B I O R A D  N A M E	//*		Returns a name in the format "File1.PIC", "File2.PIC", ...	//*		Last modified 6/11/02	//*************************************************************************	static String createBioradName(String base_name, int timepoint)	{		String		final_name = new String(base_name);				final_name += timepoint;				if (Settings.file_extension != null && (Settings.file_extension.startsWith(".p") || Settings.file_extension.startsWith(".P")))			final_name += Settings.file_extension;		else			final_name += ".PIC";					return(final_name);			}// end of createBioradFilename()	//*************************************************************************	//*		C R E A T E  B I O R A D  R G B  N A M E	//*		Returns a name in the format "Fil00101.PIC", "Fil00201.PIC", ...		//*************************************************************************	static String createBioradRGBName(String base_name, int timepoint, int channel)	{		String		final_name = new String(base_name);				if (timepoint < 10)			final_name += "00";		else if (timepoint < 100)			final_name += "0";		final_name += timepoint;				switch (channel)		{			case 1:				  final_name += "01";				  break;			case 2:				  final_name += "02";				  break;			case 3:				  final_name += "03";				  break;			default:				  final_name += "00";				  		}// end of switch				if (Settings.file_extension != null && (Settings.file_extension.startsWith(".p") || Settings.file_extension.startsWith(".P")))			final_name += Settings.file_extension;		else			final_name += ".PIC";					return(final_name);	}// end of createBioradRGBFilename()		//*************************************************************************	//*		C R E A T E  B I T F I L E  N A M E	//*************************************************************************	static	String createBitfileName(String base_name, int num)	{			String	bit_name = new String(base_name);						if (num < 10)				bit_name += "_000" + num + ".bit";			else if (num < 100)				bit_name += "_00" + num + ".bit";			else if (num < 1000)				bit_name += "_0" + num + ".bit";			else 				bit_name += "_" + num + ".bit";				return(bit_name);					}// end of createBitfileName()	//*************************************************************************	//*		C R E A T E  J P E G  N A M E	//*		Returns a name in the format "File1.JPG", "File2.JPG", ...	//*************************************************************************	static String createJPEGName(String base_name, int timepoint)	{		String		final_name = new String(base_name);				final_name += timepoint;		if (Settings.file_extension != null && (Settings.file_extension.startsWith(".j") || Settings.file_extension.startsWith(".J")))			final_name += Settings.file_extension;		else			final_name += ".JPG";					return(final_name);			}// end of createJPEGName()	//*************************************************************************	//*		C R E A T E  U R L	//*		Returns a string with the full URL of the file	//*		Last modified 5/30/02	//*************************************************************************	static String createURLName(String filename)	{		String		final_name = null;			if (Settings.input_url != null)		{			final_name = new String(Settings.input_directory_url_string);						if (!final_name.endsWith("/"))				final_name += File.separator;			final_name += filename;		}// if we have an input_url				return(final_name);			}// end of createURL()	//*******************************************************************************	//*		F I N D  B A S E  F I L E  N A M E	//*		Returns the base name from a given filename	//*		E.G:	//*		TIFF: "File1.TIF" returns "File"	//*		BIORAD_600: "File1.PIC" returns "File"	//*		BIORAD_1024: "Fil00101.PIC" returns "Fil"	//*		WAVELET_BITFILE: "File_0001.bit" returns "File"	//*	//*		Last modified 6/13/02	//*******************************************************************************	static String findBaseFileName(String fn)	{		String  	base_filename = new String();		int			i = 0;						switch (Settings.filename_syntax)		{			case TIFF_FILE:				  for (i = 0; i < 8 && fn.charAt(i) != '.'; i++)				  {				  	if (fn.charAt(i) < '0' || fn.charAt(i) > '9')				  		base_filename += fn.charAt(i); 				  }// for 				  break;			case BIORAD_600_FILE:				  for (i = 0; i < 8 && fn.charAt(i) != '.'; i++)				  {				  	if (fn.charAt(i) < '0' || fn.charAt(i) > '9')				  		base_filename += fn.charAt(i); 				  }// for 				  break;			case BIORAD_1024_FILE:					 base_filename = find1024BaseName(fn);						 break;			case WAVELET_BITFILE:				 for (i = 0; i < fn.length() - 9; i++) // assumes file ends in _####.bit				 	base_filename += fn.charAt(i); 				 break;			case JPEG_FILE:				 for (i = 0; fn.charAt(i) != '.'; i++)				  	if (fn.charAt(i) < '0' || fn.charAt(i) > '9')				  		base_filename += fn.charAt(i); 				 break;		}// switch				return(base_filename);			}// end of findBaseFileName()	//*******************************************************************************	//*		F I N D  E X T E N S I O N 	//*		Returns the extension of a given filename, if it can find one.	//*		If not, returns null.	//*	//*		E.G:	//*		STANDARD_NON_PADDED: "File.1" returns "1"	//*		STANDARD_THREE_PADDED: "File.001" returns "001"	//*		STANDARD_FOUR_PADDED: "File.0001" returns "0001"	//*		BIORAD_600: "File1.PIC" returns "PIC" (case sensitive)	//*		BIORAD_1024: "Fil00101.pic" returns "pic" (case sensitive)	//*		WAVELET_BITFILE: "File_0001.bit" returns "bit" (case sensitive)	//*	//*		Last modified 6/11/02	//*******************************************************************************	static String findExtension(String fn)	{		String  	extension = null;		int			i = 0, dot_position = NOT_FOUND;		int			num_chars = 0;				//**** Find number of characters		num_chars = fn.length();				//***** Find the dot		for (i = 0; i < num_chars; i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}// for each character that's not the dot				if (dot_position == NOT_FOUND)			return(null);		else		{			for (i = dot_position; i < num_chars; i++)			{				if (extension == null)					extension = new String("");				extension += fn.charAt(i);			}						}// if we have a "." in the filename						return(extension);			}// end of findExtension()	//*************************************************************************	//*		F I N D  1 0 2 4  B A S E  N A M E	//*		Returns the base filename given a 1024 file	//*************************************************************************	static String  find1024BaseName(String fn)	{		int			num_chars = 0, i = 0;		int			dot_position = NOT_FOUND;		char			ch = 0;		String 		base_name = new String();						//**** Find number of characters		num_chars = fn.length();				//***** Find the dot		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If there are less than six characters that proceed the dot		//		it's really not a valid filename		if (dot_position - 5 <= 0)			return (null);				//***** Get the characters between the beginning and the five sequential		//		and channel numbers			for (i = 0; i < dot_position-5; i++)			base_name += fn.charAt(i);				return(base_name);			}// end of find1024BaseName()	//*******************************************************************************	//*		F I N D  S E Q U E N T I A L  N U M B E R	//*		Returns the sequential number from a given timepoint's filename	//*		E.G:	//*		TIFF: "File1.TIF" returns 1	//*		BIORAD_600: "File1.PIC" returns 1	//*		BIORAD_1024: "Fil00101.PIC" returns 1	//*	//*		Last modified 6/13/02	//*******************************************************************************	static int findSequentialNumber(String fn)	{		String  	num_string = new String();		int			i = 0, dot_position = 0, underscore_position = 0;		int			start_position = 0;		int			num = NOT_FOUND;				switch (Settings.filename_syntax)		{			case TIFF_FILE:			case BIORAD_600_FILE:			case JPEG_FILE:				  //***** Build the number string			  	  for (i = 0; fn.charAt(i) != '.'; i++)				  {				  	if (fn.charAt(i) >= '0' && fn.charAt(i) <= '9')				  		num_string += fn.charAt(i);					  }// for each character after the dot				  num = intFromString(num_string);				  break;			case BIORAD_1024_FILE:					  //***** Find the first number				  for (i = 0; i < fn.length(); i++)				  {				  	// Start 5 chars before the dot				  	if (fn.charAt(i) == '.')				  	{				  		start_position = i-5;				  		break;					  	}				  }// for				 				  if (start_position < 0)				  	return(-1);				  					  //***** Build the number string				  for (i = start_position; i < start_position + 3; i++)				  {				  	if (fn.charAt(i) >= '0' && fn.charAt(i) <= '9')				  		num_string += fn.charAt(i);					  }				  num = intFromString(num_string);				  break;			case WAVELET_BITFILE:				  //***** Find the underscore				  for (i = 0; i < fn.length(); i++)				  {				  	if (fn.charAt(i) == '_')				  	{				  		underscore_position = i;				  		break;					  	}				  }// for								  //***** Build the number string			  	  for (i = underscore_position + 1; i < fn.length(); i++)				  {				  	if (fn.charAt(i) >= '0' && fn.charAt(i) <= '9')				  		num_string += fn.charAt(i);					  }// for each character after the dot				  num = intFromString(num_string);				  break;				  		}// switch				return(num);			}// end of findSequentialNumber()	//*************************************************************************	//*		F I N D  F I L E N A M E  S Y N T A X	//*		Tries to determine the filename syntax by stepping through	//*		methods that test the filename.  Starts with the easiest to	//*		differentiate, then progresses to harder tests.	//*	//*		Last modified 6/13/02	//*************************************************************************	static  int  findFilenameSyntax(String fn)	{			if (isTiffName(fn))			return(TIFF_FILE);					else if (isBiorad1024Name(fn))			return(BIORAD_1024_FILE);		else if (isBiorad600Name(fn))			return(BIORAD_600_FILE);		else if (isBitfileName(fn))			return(WAVELET_BITFILE);		else if (isJPEGName(fn))			return(JPEG_FILE);		else			return(UNKNOWN_FILE);			}// end of getFilenameSyntax()		//*************************************************************************	//*		I S  F I L E N A M E  F O R M A T	//*		Returns TRUE if fn matches the syntax of filename type 'filetype'	//*		Last modifed 6/13/02	//*************************************************************************	static	boolean  isFilenameFormat(String fn, int filetype)	{				switch (filetype)		{			case TIFF_FILE:				 return(isTiffName(fn));			case BIORAD_600_FILE:				 return(isBiorad600Name(fn));			case BIORAD_1024_FILE:				 return(isBiorad1024Name(fn));			case WAVELET_BITFILE:				 return (isBitfileName(fn));			case JPEG_FILE:				 return(isJPEGName(fn));		}//end of switch				return(false);			}// end of isFilenameFormat()	//*************************************************************************	//*		I S  B I T F I L E  N A M E	//*		Returns TRUE if fn is likely to be a wavelet bitfile 	//*		(e.g. "File0001.bit")	//*		This test is not completely conclusive, it can really only exclude	//*************************************************************************	static boolean  isBitfileName(String fn)	{		int		num_chars = 0, i = 0;		int		dot_position = NOT_FOUND;				//**** Find number of characters		num_chars = fn.length();				//***** Find the "."		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If we didn't find a '.' in the filename, it's not it		if (dot_position == NOT_FOUND)			return(false);				//***** If we don't have four numbers following the dot, it's not it		if (num_chars-1 != dot_position + 3)			return(false);					//***** If the next four characters aren't "bit", it's not it		if (fn.charAt(dot_position + 1) !='b')			return(false);		if (fn.charAt(dot_position + 2) != 'i')			return(false);		if (fn.charAt(dot_position + 3) != 't')			return(false);				//***** Otherwise, it could be it		return(true);			}// end of isBitfileName()			//*************************************************************************	//*		I S  B I O R A D  6 0 0  N A M E	//*		Returns TRUE if fn is likely to be a Biorad MRC-600 filename 	//*		(e.g. "File1.PIC")	//*		This test is not completely conclusive, it can really only exclude	//*		Also, it doesn't mean much unless the isBiorad1024Name test failed	//*************************************************************************	static boolean  isBiorad600Name(String fn)	{		int		num_chars = 0, i = 0;		int		dot_position = NOT_FOUND;				//**** Find number of characters		num_chars = fn.length();				//***** Find the "."		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If we didn't find a '.' in the filename, it's not it		if (dot_position == NOT_FOUND)			return(false);				//***** If we don't have three characters following the dot, it's not it		if (num_chars-1 != dot_position + 3)			return(false);					//***** If the next three characters aren't "pic" (not case sensitive), it's not it		if (!(fn.charAt(dot_position + 1) == 'p' || fn.charAt(dot_position + 1) == 'P') ||			!(fn.charAt(dot_position + 2) == 'i' || fn.charAt(dot_position + 2) == 'I') ||			!(fn.charAt(dot_position + 3) == 'c' || fn.charAt(dot_position + 3) == 'C'))			return(false);				//***** Otherwise, it could be it		return(true);			}// end of isBiorad600Name()	//*************************************************************************	//*		I S  B I O R A D  1 0 2 4  N A M E	//*		Returns TRUE if fn is likely to be a Biorad MRC-1024 filename 	//*		(e.g. "Fil00101.PIC")	//*		This test is not completely conclusive, it can really only exclude	//*************************************************************************	static boolean  isBiorad1024Name(String fn)	{		int		num_chars = 0, i = 0;		int		dot_position = NOT_FOUND;		char	ch = 0;				//**** Find number of characters		num_chars = fn.length();				//***** Find the "."		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If we didn't find a '.' in the filename, it's not it		if (dot_position == NOT_FOUND)			return(false);				//***** If we don't have three characters following the dot, it's not it		if (num_chars-1 != dot_position + 3)			return(false);					//***** If the next four characters aren't "pic" or "PIC", it's not it		if ((fn.charAt(dot_position + 1) != 'p' && fn.charAt(dot_position + 2) != 'i' &&			fn.charAt(dot_position + 3) != 'c') && (fn.charAt(dot_position + 1) != 'P' &&			fn.charAt(dot_position + 2) != 'I' && fn.charAt(dot_position + 3) != 'C'))			return(false);				//***** If the five characters preceding the '.' aren't numbers, it's not it		for (i = 1; i <= 5 && dot_position - i >= 0; i++)		{			ch = fn.charAt(dot_position - i);			if (ch < '0' || ch > '9')				return(false);			}		 		//***** Otherwise, it could be it		return(true);			}// end of isBiorad1024Name()			//*************************************************************************	//*		I S  T I F F  N A M E	//*		Returns TRUE if fn is likely a tiff filename (e.g. "File1.tif")	//*************************************************************************	static boolean  isTiffName(String fn)	{		int		num_chars = 0, i = 0;		int		dot_position = NOT_FOUND;				//**** Find number of characters		num_chars = fn.length();				//***** Find the "."		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If we didn't find a '.' in the filename, it's not it		if (dot_position == NOT_FOUND)			return(false);				//***** If we don't have three characters following the dot, it's not it		if (num_chars-1 != dot_position + 3)			return(false);					//***** If the next three characters aren't "tif" (not case sensitive), it's not it		if (!(fn.charAt(dot_position + 1) == 't' || fn.charAt(dot_position + 1) == 'T') ||			!(fn.charAt(dot_position + 2) == 'i' || fn.charAt(dot_position + 2) == 'I') ||			!(fn.charAt(dot_position + 3) == 'f' || fn.charAt(dot_position + 3) == 'F'))			return(false);				//***** Otherwise, it could be it		return(true);			}// end of isTiffName()	//*************************************************************************	//*		I S  J P E G  N A M E	//*		Returns TRUE if fn is likely a jpeg filename 	//*		(e.g. "File1.jpg", "File1.JPG", "File1.jpeg", or "File1.JPEG")	//*************************************************************************	static boolean  isJPEGName(String fn)	{		int		num_chars = 0, i = 0;		int		dot_position = NOT_FOUND, read_position = NOT_FOUND;				//**** Find number of characters		num_chars = fn.length();				//***** Find the "."		for (i = 0; i < fn.length(); i++)		{			if (fn.charAt(i) == '.')			{				dot_position = i;				break;			}		}				//***** If we didn't find a '.' in the filename, it's not it		if (dot_position == NOT_FOUND)			return(false);					read_position = dot_position + 1;				//***** next character should be 'J' or 'j'		if (num_chars-1 < read_position || (fn.charAt(read_position) != 'J' && fn.charAt(read_position) != 'j'))			return(false);			read_position += 1;				//***** next character should be 'P' or 'p'		if (num_chars-1 < read_position || (fn.charAt(read_position) != 'P' && fn.charAt(read_position) != 'p'))			return(false);			read_position += 1;		//***** If the next character is 'G' or 'g' we have a winner		if (num_chars-1 >= read_position && (fn.charAt(read_position) == 'G' || fn.charAt(read_position) == 'g'))			return(true);					//***** Otherwise, the next character should be 'E' or 'e'		else if(num_chars-1 < read_position || (fn.charAt(read_position) != 'E' && fn.charAt(read_position) != 'E'))			return(false);			read_position += 1;		//***** If the next character is 'G' or 'g' we have a winner		if (num_chars-1 >= read_position && (fn.charAt(read_position) == 'G' && fn.charAt(read_position) == 'g'))			return(true);					return(false);			}// end of isJPEGName()	//******************************************************************	//*			C O U N T  F I L E S  I N  D I R E C T O R Y	//******************************************************************	static int		countFilesInDirectory(String directory)	{		File			first_file = null;		String[]		file_list = null;		String			cur_filename = null;			int				num_files = 0, i = 0;					first_file = new File (directory);		if (first_file != null && first_file.exists())		{			file_list = first_file.list();					if (file_list != null)			{				//***** Count the files				try				{					do					{						cur_filename = new String(file_list[num_files]);						num_files += 1;					}// do					while(true);				}// try				catch (ArrayIndexOutOfBoundsException e)				{					return(num_files);				}				}// if we have files		}// if the file exists				return(num_files);	}// end of countFilesInDirectory()	//******************************************************************	//*			C O U N T  V A L I D  F I L E S  I N  D I R E C T O R Y	//*			Returns the number of files in the directory that are	//*			of type filename_syntax	//******************************************************************	static int		countValidFilesInDirectory(String directory, int filename_syntax)	{		File			first_file = null;		String[]		file_list = null;		String			cur_filename = null;			int				file_counter = 0, valid_files = 0;					first_file = new File (directory);		if (first_file != null && first_file.exists())		{			file_list = first_file.list();					if (file_list != null)			{				//***** Count the files				try				{					do					{						cur_filename = new String(file_list[file_counter]);						if (isFilenameFormat(cur_filename, filename_syntax))							valid_files += 1;						file_counter += 1;					}// do					while(true);				}// try				catch (ArrayIndexOutOfBoundsException e)				{					return(valid_files);				}				}// if we have files		}// if the file exists				return(valid_files);	}// end of countValidFilesInDirectory()	//************************************************************************	//*			C O U N T  V A L I D  F I L E S  I N  D I R E C T O R Y	//*			Returns the number of files in the directory that are	//*			of type filename_syntax and which start with "base_file_name"	//*			Last modified 5/7/02	//************************************************************************	static int		countValidFilesInDirectory(String directory, String base_file_name, int filename_syntax)	{		File			first_file = null;		String[]		file_list = null;		String			cur_filename = null;			int				file_counter = 0, valid_files = 0;				if (directory == null || base_file_name == null)			return(0);						first_file = new File (directory);		if (first_file != null && first_file.exists())		{			file_list = first_file.list();					if (file_list != null)			{				//***** Count the files				try				{					do					{						cur_filename = new String(file_list[file_counter]);						if (isFilenameFormat(cur_filename, filename_syntax) && cur_filename.startsWith(base_file_name))							valid_files += 1;						file_counter += 1;					}// do					while(true);				}// try				catch (ArrayIndexOutOfBoundsException e)				{					return(valid_files);				}				}// if we have files		}// if the file exists				return(valid_files);	}// end of countValidFilesInDirectory()	//******************************************************************	//*			C H E C K  F O R  M I S S I N G  F I L E S	//*			Checks the directory to make sure that all the files	//*			we are anticipating to process are present	//*	//*			Throws an exception if a file is missing.	//******************************************************************	static void checkForMissingFiles(String directory, String base_filename, int file_syntax, int first_file_num, int num_files) throws Exception	{		File		test_file = null;		String		filename = null;		int			i = 0, channel = 1;				Settings.image_window.displayMessage("Verifying all files are present.");				//***** Go through and look for each file		for (i = first_file_num; i <= num_files; i++)		{			if (file_syntax != BIORAD_1024_FILE)			{				filename = createInputFilename(base_filename, i, file_syntax, channel);				test_file = new File(directory + filename);				if (!test_file.exists())					throw new Exception("The file " + filename + " was not found!");			}						else 			{				if (Settings.rgb_settings.ch_1_on)				{					filename = createInputFilename(base_filename, i, file_syntax, 1);					test_file = new File(directory + filename);					if (!test_file.exists())						throw new Exception("The file " + filename + " was not found!");				}				if (Settings.rgb_settings.ch_2_on)				{					filename = createInputFilename(base_filename, i, file_syntax, 2);					test_file = new File(directory + filename);					if (!test_file.exists())						throw new Exception("The file " + filename + " was not found!");				}				if (Settings.rgb_settings.ch_3_on)				{					filename = createInputFilename(base_filename, i, file_syntax, 3);					test_file = new File(directory + filename);					if (!test_file.exists())						throw new Exception("The file " + filename + " was not found!");				}			}// if it's a Biorad 1024 file		}// for each file			Settings.image_window.displayMessage("All files verified.");			return;			}// end of checkForMissingFiles()	//*************************************************************************	//*		I N T  F R O M  S T R I N G	//*************************************************************************	static  int  intFromString(String num_string)	{		Double		d = null;		try 		{			d = new Double(num_string);		}		catch (NumberFormatException e) 		{			return(NOT_FOUND);		}// if an exception was generated			return (d.intValue());			}// end of intFromString()				}// end of class NameUtils